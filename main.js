!function(t){var n={};function r(e){if(n[e])return n[e].exports;var a=n[e]={i:e,l:!1,exports:{}};return t[e].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var a in t)r.d(e,a,function(n){return t[n]}.bind(null,a));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="dist",r(r.s=5)}([function(t,n,r){"use strict";r.r(n);var e={};r.r(e),r.d(e,"EPSILON",function(){return d}),r.d(e,"ARRAY_TYPE",function(){return m}),r.d(e,"RANDOM",function(){return M}),r.d(e,"setMatrixArrayType",function(){return v}),r.d(e,"toRadian",function(){return p}),r.d(e,"equals",function(){return b});var a={};r.r(a),r.d(a,"create",function(){return w}),r.d(a,"clone",function(){return x}),r.d(a,"copy",function(){return P}),r.d(a,"identity",function(){return y}),r.d(a,"fromValues",function(){return S}),r.d(a,"set",function(){return T}),r.d(a,"transpose",function(){return E}),r.d(a,"invert",function(){return A}),r.d(a,"adjoint",function(){return R}),r.d(a,"determinant",function(){return V}),r.d(a,"multiply",function(){return q}),r.d(a,"rotate",function(){return _}),r.d(a,"scale",function(){return F}),r.d(a,"fromRotation",function(){return C}),r.d(a,"fromScaling",function(){return L}),r.d(a,"str",function(){return D}),r.d(a,"frob",function(){return N}),r.d(a,"LDU",function(){return I}),r.d(a,"add",function(){return k}),r.d(a,"subtract",function(){return j}),r.d(a,"exactEquals",function(){return Y}),r.d(a,"equals",function(){return U}),r.d(a,"multiplyScalar",function(){return O}),r.d(a,"multiplyScalarAndAdd",function(){return B}),r.d(a,"mul",function(){return X}),r.d(a,"sub",function(){return z});var o={};r.r(o),r.d(o,"create",function(){return G}),r.d(o,"clone",function(){return H}),r.d(o,"copy",function(){return W}),r.d(o,"identity",function(){return Q}),r.d(o,"fromValues",function(){return Z}),r.d(o,"set",function(){return K}),r.d(o,"invert",function(){return J}),r.d(o,"determinant",function(){return $}),r.d(o,"multiply",function(){return tt}),r.d(o,"rotate",function(){return nt}),r.d(o,"scale",function(){return rt}),r.d(o,"translate",function(){return et}),r.d(o,"fromRotation",function(){return at}),r.d(o,"fromScaling",function(){return ot}),r.d(o,"fromTranslation",function(){return ut}),r.d(o,"str",function(){return it}),r.d(o,"frob",function(){return ct}),r.d(o,"add",function(){return st}),r.d(o,"subtract",function(){return ft}),r.d(o,"multiplyScalar",function(){return lt}),r.d(o,"multiplyScalarAndAdd",function(){return ht}),r.d(o,"exactEquals",function(){return dt}),r.d(o,"equals",function(){return mt}),r.d(o,"mul",function(){return Mt}),r.d(o,"sub",function(){return vt});var u={};r.r(u),r.d(u,"create",function(){return gt}),r.d(u,"fromMat4",function(){return pt}),r.d(u,"clone",function(){return bt}),r.d(u,"copy",function(){return wt}),r.d(u,"fromValues",function(){return xt}),r.d(u,"set",function(){return Pt}),r.d(u,"identity",function(){return yt}),r.d(u,"transpose",function(){return St}),r.d(u,"invert",function(){return Tt}),r.d(u,"adjoint",function(){return Et}),r.d(u,"determinant",function(){return At}),r.d(u,"multiply",function(){return Rt}),r.d(u,"translate",function(){return Vt}),r.d(u,"rotate",function(){return qt}),r.d(u,"scale",function(){return _t}),r.d(u,"fromTranslation",function(){return Ft}),r.d(u,"fromRotation",function(){return Ct}),r.d(u,"fromScaling",function(){return Lt}),r.d(u,"fromMat2d",function(){return Dt}),r.d(u,"fromQuat",function(){return Nt}),r.d(u,"normalFromMat4",function(){return It}),r.d(u,"projection",function(){return kt}),r.d(u,"str",function(){return jt}),r.d(u,"frob",function(){return Yt}),r.d(u,"add",function(){return Ut}),r.d(u,"subtract",function(){return Ot}),r.d(u,"multiplyScalar",function(){return Bt}),r.d(u,"multiplyScalarAndAdd",function(){return Xt}),r.d(u,"exactEquals",function(){return zt}),r.d(u,"equals",function(){return Gt}),r.d(u,"mul",function(){return Ht}),r.d(u,"sub",function(){return Wt});var i={};r.r(i),r.d(i,"create",function(){return Qt}),r.d(i,"clone",function(){return Zt}),r.d(i,"copy",function(){return Kt}),r.d(i,"fromValues",function(){return Jt}),r.d(i,"set",function(){return $t}),r.d(i,"identity",function(){return tn}),r.d(i,"transpose",function(){return nn}),r.d(i,"invert",function(){return rn}),r.d(i,"adjoint",function(){return en}),r.d(i,"determinant",function(){return an}),r.d(i,"multiply",function(){return on}),r.d(i,"translate",function(){return un}),r.d(i,"scale",function(){return cn}),r.d(i,"rotate",function(){return sn}),r.d(i,"rotateX",function(){return fn}),r.d(i,"rotateY",function(){return ln}),r.d(i,"rotateZ",function(){return hn}),r.d(i,"fromTranslation",function(){return dn}),r.d(i,"fromScaling",function(){return mn}),r.d(i,"fromRotation",function(){return Mn}),r.d(i,"fromXRotation",function(){return vn}),r.d(i,"fromYRotation",function(){return gn}),r.d(i,"fromZRotation",function(){return pn}),r.d(i,"fromRotationTranslation",function(){return bn}),r.d(i,"fromQuat2",function(){return wn}),r.d(i,"getTranslation",function(){return xn}),r.d(i,"getScaling",function(){return Pn}),r.d(i,"getRotation",function(){return yn}),r.d(i,"fromRotationTranslationScale",function(){return Sn}),r.d(i,"fromRotationTranslationScaleOrigin",function(){return Tn}),r.d(i,"fromQuat",function(){return En}),r.d(i,"frustum",function(){return An}),r.d(i,"perspective",function(){return Rn}),r.d(i,"perspectiveFromFieldOfView",function(){return Vn}),r.d(i,"ortho",function(){return qn}),r.d(i,"lookAt",function(){return _n}),r.d(i,"targetTo",function(){return Fn}),r.d(i,"str",function(){return Cn}),r.d(i,"frob",function(){return Ln}),r.d(i,"add",function(){return Dn}),r.d(i,"subtract",function(){return Nn}),r.d(i,"multiplyScalar",function(){return In}),r.d(i,"multiplyScalarAndAdd",function(){return kn}),r.d(i,"exactEquals",function(){return jn}),r.d(i,"equals",function(){return Yn}),r.d(i,"mul",function(){return Un}),r.d(i,"sub",function(){return On});var c={};r.r(c),r.d(c,"create",function(){return Bn}),r.d(c,"clone",function(){return Xn}),r.d(c,"length",function(){return zn}),r.d(c,"fromValues",function(){return Gn}),r.d(c,"copy",function(){return Hn}),r.d(c,"set",function(){return Wn}),r.d(c,"add",function(){return Qn}),r.d(c,"subtract",function(){return Zn}),r.d(c,"multiply",function(){return Kn}),r.d(c,"divide",function(){return Jn}),r.d(c,"ceil",function(){return $n}),r.d(c,"floor",function(){return tr}),r.d(c,"min",function(){return nr}),r.d(c,"max",function(){return rr}),r.d(c,"round",function(){return er}),r.d(c,"scale",function(){return ar}),r.d(c,"scaleAndAdd",function(){return or}),r.d(c,"distance",function(){return ur}),r.d(c,"squaredDistance",function(){return ir}),r.d(c,"squaredLength",function(){return cr}),r.d(c,"negate",function(){return sr}),r.d(c,"inverse",function(){return fr}),r.d(c,"normalize",function(){return lr}),r.d(c,"dot",function(){return hr}),r.d(c,"cross",function(){return dr}),r.d(c,"lerp",function(){return mr}),r.d(c,"hermite",function(){return Mr}),r.d(c,"bezier",function(){return vr}),r.d(c,"random",function(){return gr}),r.d(c,"transformMat4",function(){return pr}),r.d(c,"transformMat3",function(){return br}),r.d(c,"transformQuat",function(){return wr}),r.d(c,"rotateX",function(){return xr}),r.d(c,"rotateY",function(){return Pr}),r.d(c,"rotateZ",function(){return yr}),r.d(c,"angle",function(){return Sr}),r.d(c,"str",function(){return Tr}),r.d(c,"exactEquals",function(){return Er}),r.d(c,"equals",function(){return Ar}),r.d(c,"sub",function(){return Rr}),r.d(c,"mul",function(){return Vr}),r.d(c,"div",function(){return qr}),r.d(c,"dist",function(){return _r}),r.d(c,"sqrDist",function(){return Fr}),r.d(c,"len",function(){return Cr}),r.d(c,"sqrLen",function(){return Lr}),r.d(c,"forEach",function(){return Dr});var s={};r.r(s),r.d(s,"create",function(){return Nr}),r.d(s,"clone",function(){return Ir}),r.d(s,"fromValues",function(){return kr}),r.d(s,"copy",function(){return jr}),r.d(s,"set",function(){return Yr}),r.d(s,"add",function(){return Ur}),r.d(s,"subtract",function(){return Or}),r.d(s,"multiply",function(){return Br}),r.d(s,"divide",function(){return Xr}),r.d(s,"ceil",function(){return zr}),r.d(s,"floor",function(){return Gr}),r.d(s,"min",function(){return Hr}),r.d(s,"max",function(){return Wr}),r.d(s,"round",function(){return Qr}),r.d(s,"scale",function(){return Zr}),r.d(s,"scaleAndAdd",function(){return Kr}),r.d(s,"distance",function(){return Jr}),r.d(s,"squaredDistance",function(){return $r}),r.d(s,"length",function(){return te}),r.d(s,"squaredLength",function(){return ne}),r.d(s,"negate",function(){return re}),r.d(s,"inverse",function(){return ee}),r.d(s,"normalize",function(){return ae}),r.d(s,"dot",function(){return oe}),r.d(s,"lerp",function(){return ue}),r.d(s,"random",function(){return ie}),r.d(s,"transformMat4",function(){return ce}),r.d(s,"transformQuat",function(){return se}),r.d(s,"str",function(){return fe}),r.d(s,"exactEquals",function(){return le}),r.d(s,"equals",function(){return he}),r.d(s,"sub",function(){return de}),r.d(s,"mul",function(){return me}),r.d(s,"div",function(){return Me}),r.d(s,"dist",function(){return ve}),r.d(s,"sqrDist",function(){return ge}),r.d(s,"len",function(){return pe}),r.d(s,"sqrLen",function(){return be}),r.d(s,"forEach",function(){return we});var f={};r.r(f),r.d(f,"create",function(){return xe}),r.d(f,"identity",function(){return Pe}),r.d(f,"setAxisAngle",function(){return ye}),r.d(f,"getAxisAngle",function(){return Se}),r.d(f,"multiply",function(){return Te}),r.d(f,"rotateX",function(){return Ee}),r.d(f,"rotateY",function(){return Ae}),r.d(f,"rotateZ",function(){return Re}),r.d(f,"calculateW",function(){return Ve}),r.d(f,"slerp",function(){return qe}),r.d(f,"random",function(){return _e}),r.d(f,"invert",function(){return Fe}),r.d(f,"conjugate",function(){return Ce}),r.d(f,"fromMat3",function(){return Le}),r.d(f,"fromEuler",function(){return De}),r.d(f,"str",function(){return Ne}),r.d(f,"clone",function(){return Ie}),r.d(f,"fromValues",function(){return ke}),r.d(f,"copy",function(){return je}),r.d(f,"set",function(){return Ye}),r.d(f,"add",function(){return Ue}),r.d(f,"mul",function(){return Oe}),r.d(f,"scale",function(){return Be}),r.d(f,"dot",function(){return Xe}),r.d(f,"lerp",function(){return ze}),r.d(f,"length",function(){return Ge}),r.d(f,"len",function(){return He}),r.d(f,"squaredLength",function(){return We}),r.d(f,"sqrLen",function(){return Qe}),r.d(f,"normalize",function(){return Ze}),r.d(f,"exactEquals",function(){return Ke}),r.d(f,"equals",function(){return Je}),r.d(f,"rotationTo",function(){return $e}),r.d(f,"sqlerp",function(){return ta}),r.d(f,"setAxes",function(){return na});var l={};r.r(l),r.d(l,"create",function(){return ra}),r.d(l,"clone",function(){return ea}),r.d(l,"fromValues",function(){return aa}),r.d(l,"fromRotationTranslationValues",function(){return oa}),r.d(l,"fromRotationTranslation",function(){return ua}),r.d(l,"fromTranslation",function(){return ia}),r.d(l,"fromRotation",function(){return ca}),r.d(l,"fromMat4",function(){return sa}),r.d(l,"copy",function(){return fa}),r.d(l,"identity",function(){return la}),r.d(l,"set",function(){return ha}),r.d(l,"getReal",function(){return da}),r.d(l,"getDual",function(){return ma}),r.d(l,"setReal",function(){return Ma}),r.d(l,"setDual",function(){return va}),r.d(l,"getTranslation",function(){return ga}),r.d(l,"translate",function(){return pa}),r.d(l,"rotateX",function(){return ba}),r.d(l,"rotateY",function(){return wa}),r.d(l,"rotateZ",function(){return xa}),r.d(l,"rotateByQuatAppend",function(){return Pa}),r.d(l,"rotateByQuatPrepend",function(){return ya}),r.d(l,"rotateAroundAxis",function(){return Sa}),r.d(l,"add",function(){return Ta}),r.d(l,"multiply",function(){return Ea}),r.d(l,"mul",function(){return Aa}),r.d(l,"scale",function(){return Ra}),r.d(l,"dot",function(){return Va}),r.d(l,"lerp",function(){return qa}),r.d(l,"invert",function(){return _a}),r.d(l,"conjugate",function(){return Fa}),r.d(l,"length",function(){return Ca}),r.d(l,"len",function(){return La}),r.d(l,"squaredLength",function(){return Da}),r.d(l,"sqrLen",function(){return Na}),r.d(l,"normalize",function(){return Ia}),r.d(l,"str",function(){return ka}),r.d(l,"exactEquals",function(){return ja}),r.d(l,"equals",function(){return Ya});var h={};r.r(h),r.d(h,"create",function(){return Ua}),r.d(h,"clone",function(){return Oa}),r.d(h,"fromValues",function(){return Ba}),r.d(h,"copy",function(){return Xa}),r.d(h,"set",function(){return za}),r.d(h,"add",function(){return Ga}),r.d(h,"subtract",function(){return Ha}),r.d(h,"multiply",function(){return Wa}),r.d(h,"divide",function(){return Qa}),r.d(h,"ceil",function(){return Za}),r.d(h,"floor",function(){return Ka}),r.d(h,"min",function(){return Ja}),r.d(h,"max",function(){return $a}),r.d(h,"round",function(){return to}),r.d(h,"scale",function(){return no}),r.d(h,"scaleAndAdd",function(){return ro}),r.d(h,"distance",function(){return eo}),r.d(h,"squaredDistance",function(){return ao}),r.d(h,"length",function(){return oo}),r.d(h,"squaredLength",function(){return uo}),r.d(h,"negate",function(){return io}),r.d(h,"inverse",function(){return co}),r.d(h,"normalize",function(){return so}),r.d(h,"dot",function(){return fo}),r.d(h,"cross",function(){return lo}),r.d(h,"lerp",function(){return ho}),r.d(h,"random",function(){return mo}),r.d(h,"transformMat2",function(){return Mo}),r.d(h,"transformMat2d",function(){return vo}),r.d(h,"transformMat3",function(){return go}),r.d(h,"transformMat4",function(){return po}),r.d(h,"rotate",function(){return bo}),r.d(h,"angle",function(){return wo}),r.d(h,"str",function(){return xo}),r.d(h,"exactEquals",function(){return Po}),r.d(h,"equals",function(){return yo}),r.d(h,"len",function(){return So}),r.d(h,"sub",function(){return To}),r.d(h,"mul",function(){return Eo}),r.d(h,"div",function(){return Ao}),r.d(h,"dist",function(){return Ro}),r.d(h,"sqrDist",function(){return Vo}),r.d(h,"sqrLen",function(){return qo}),r.d(h,"forEach",function(){return _o});var d=1e-6,m="undefined"!=typeof Float32Array?Float32Array:Array,M=Math.random;function v(t){m=t}var g=Math.PI/180;function p(t){return t*g}function b(t,n){return Math.abs(t-n)<=d*Math.max(1,Math.abs(t),Math.abs(n))}function w(){var t=new m(4);return m!=Float32Array&&(t[1]=0,t[2]=0),t[0]=1,t[3]=1,t}function x(t){var n=new m(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function P(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function y(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t}function S(t,n,r,e){var a=new m(4);return a[0]=t,a[1]=n,a[2]=r,a[3]=e,a}function T(t,n,r,e,a){return t[0]=n,t[1]=r,t[2]=e,t[3]=a,t}function E(t,n){if(t===n){var r=n[1];t[1]=n[2],t[2]=r}else t[0]=n[0],t[1]=n[2],t[2]=n[1],t[3]=n[3];return t}function A(t,n){var r=n[0],e=n[1],a=n[2],o=n[3],u=r*o-a*e;return u?(u=1/u,t[0]=o*u,t[1]=-e*u,t[2]=-a*u,t[3]=r*u,t):null}function R(t,n){var r=n[0];return t[0]=n[3],t[1]=-n[1],t[2]=-n[2],t[3]=r,t}function V(t){return t[0]*t[3]-t[2]*t[1]}function q(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=r[0],c=r[1],s=r[2],f=r[3];return t[0]=e*i+o*c,t[1]=a*i+u*c,t[2]=e*s+o*f,t[3]=a*s+u*f,t}function _(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=Math.sin(r),c=Math.cos(r);return t[0]=e*c+o*i,t[1]=a*c+u*i,t[2]=e*-i+o*c,t[3]=a*-i+u*c,t}function F(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=r[0],c=r[1];return t[0]=e*i,t[1]=a*i,t[2]=o*c,t[3]=u*c,t}function C(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=-r,t[3]=e,t}function L(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t}function D(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function N(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2))}function I(t,n,r,e){return t[2]=e[2]/e[0],r[0]=e[0],r[1]=e[1],r[3]=e[3]-t[2]*r[1],[t,n,r]}function k(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t}function j(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}function Y(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]}function U(t,n){var r=t[0],e=t[1],a=t[2],o=t[3],u=n[0],i=n[1],c=n[2],s=n[3];return Math.abs(r-u)<=d*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(e-i)<=d*Math.max(1,Math.abs(e),Math.abs(i))&&Math.abs(a-c)<=d*Math.max(1,Math.abs(a),Math.abs(c))&&Math.abs(o-s)<=d*Math.max(1,Math.abs(o),Math.abs(s))}function O(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t}function B(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t}var X=q,z=j;function G(){var t=new m(6);return m!=Float32Array&&(t[1]=0,t[2]=0,t[4]=0,t[5]=0),t[0]=1,t[3]=1,t}function H(t){var n=new m(6);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n}function W(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t}function Q(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t}function Z(t,n,r,e,a,o){var u=new m(6);return u[0]=t,u[1]=n,u[2]=r,u[3]=e,u[4]=a,u[5]=o,u}function K(t,n,r,e,a,o,u){return t[0]=n,t[1]=r,t[2]=e,t[3]=a,t[4]=o,t[5]=u,t}function J(t,n){var r=n[0],e=n[1],a=n[2],o=n[3],u=n[4],i=n[5],c=r*o-e*a;return c?(c=1/c,t[0]=o*c,t[1]=-e*c,t[2]=-a*c,t[3]=r*c,t[4]=(a*i-o*u)*c,t[5]=(e*u-r*i)*c,t):null}function $(t){return t[0]*t[3]-t[1]*t[2]}function tt(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=n[4],c=n[5],s=r[0],f=r[1],l=r[2],h=r[3],d=r[4],m=r[5];return t[0]=e*s+o*f,t[1]=a*s+u*f,t[2]=e*l+o*h,t[3]=a*l+u*h,t[4]=e*d+o*m+i,t[5]=a*d+u*m+c,t}function nt(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=n[4],c=n[5],s=Math.sin(r),f=Math.cos(r);return t[0]=e*f+o*s,t[1]=a*f+u*s,t[2]=e*-s+o*f,t[3]=a*-s+u*f,t[4]=i,t[5]=c,t}function rt(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=n[4],c=n[5],s=r[0],f=r[1];return t[0]=e*s,t[1]=a*s,t[2]=o*f,t[3]=u*f,t[4]=i,t[5]=c,t}function et(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=n[4],c=n[5],s=r[0],f=r[1];return t[0]=e,t[1]=a,t[2]=o,t[3]=u,t[4]=e*s+o*f+i,t[5]=a*s+u*f+c,t}function at(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=-r,t[3]=e,t[4]=0,t[5]=0,t}function ot(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t[4]=0,t[5]=0,t}function ut(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=n[0],t[5]=n[1],t}function it(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"}function ct(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+1)}function st(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t}function ft(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t}function lt(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t}function ht(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t}function dt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]}function mt(t,n){var r=t[0],e=t[1],a=t[2],o=t[3],u=t[4],i=t[5],c=n[0],s=n[1],f=n[2],l=n[3],h=n[4],m=n[5];return Math.abs(r-c)<=d*Math.max(1,Math.abs(r),Math.abs(c))&&Math.abs(e-s)<=d*Math.max(1,Math.abs(e),Math.abs(s))&&Math.abs(a-f)<=d*Math.max(1,Math.abs(a),Math.abs(f))&&Math.abs(o-l)<=d*Math.max(1,Math.abs(o),Math.abs(l))&&Math.abs(u-h)<=d*Math.max(1,Math.abs(u),Math.abs(h))&&Math.abs(i-m)<=d*Math.max(1,Math.abs(i),Math.abs(m))}var Mt=tt,vt=ft;function gt(){var t=new m(9);return m!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[5]=0,t[6]=0,t[7]=0),t[0]=1,t[4]=1,t[8]=1,t}function pt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[4],t[4]=n[5],t[5]=n[6],t[6]=n[8],t[7]=n[9],t[8]=n[10],t}function bt(t){var n=new m(9);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n}function wt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t}function xt(t,n,r,e,a,o,u,i,c){var s=new m(9);return s[0]=t,s[1]=n,s[2]=r,s[3]=e,s[4]=a,s[5]=o,s[6]=u,s[7]=i,s[8]=c,s}function Pt(t,n,r,e,a,o,u,i,c,s){return t[0]=n,t[1]=r,t[2]=e,t[3]=a,t[4]=o,t[5]=u,t[6]=i,t[7]=c,t[8]=s,t}function yt(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function St(t,n){if(t===n){var r=n[1],e=n[2],a=n[5];t[1]=n[3],t[2]=n[6],t[3]=r,t[5]=n[7],t[6]=e,t[7]=a}else t[0]=n[0],t[1]=n[3],t[2]=n[6],t[3]=n[1],t[4]=n[4],t[5]=n[7],t[6]=n[2],t[7]=n[5],t[8]=n[8];return t}function Tt(t,n){var r=n[0],e=n[1],a=n[2],o=n[3],u=n[4],i=n[5],c=n[6],s=n[7],f=n[8],l=f*u-i*s,h=-f*o+i*c,d=s*o-u*c,m=r*l+e*h+a*d;return m?(m=1/m,t[0]=l*m,t[1]=(-f*e+a*s)*m,t[2]=(i*e-a*u)*m,t[3]=h*m,t[4]=(f*r-a*c)*m,t[5]=(-i*r+a*o)*m,t[6]=d*m,t[7]=(-s*r+e*c)*m,t[8]=(u*r-e*o)*m,t):null}function Et(t,n){var r=n[0],e=n[1],a=n[2],o=n[3],u=n[4],i=n[5],c=n[6],s=n[7],f=n[8];return t[0]=u*f-i*s,t[1]=a*s-e*f,t[2]=e*i-a*u,t[3]=i*c-o*f,t[4]=r*f-a*c,t[5]=a*o-r*i,t[6]=o*s-u*c,t[7]=e*c-r*s,t[8]=r*u-e*o,t}function At(t){var n=t[0],r=t[1],e=t[2],a=t[3],o=t[4],u=t[5],i=t[6],c=t[7],s=t[8];return n*(s*o-u*c)+r*(-s*a+u*i)+e*(c*a-o*i)}function Rt(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=n[4],c=n[5],s=n[6],f=n[7],l=n[8],h=r[0],d=r[1],m=r[2],M=r[3],v=r[4],g=r[5],p=r[6],b=r[7],w=r[8];return t[0]=h*e+d*u+m*s,t[1]=h*a+d*i+m*f,t[2]=h*o+d*c+m*l,t[3]=M*e+v*u+g*s,t[4]=M*a+v*i+g*f,t[5]=M*o+v*c+g*l,t[6]=p*e+b*u+w*s,t[7]=p*a+b*i+w*f,t[8]=p*o+b*c+w*l,t}function Vt(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=n[4],c=n[5],s=n[6],f=n[7],l=n[8],h=r[0],d=r[1];return t[0]=e,t[1]=a,t[2]=o,t[3]=u,t[4]=i,t[5]=c,t[6]=h*e+d*u+s,t[7]=h*a+d*i+f,t[8]=h*o+d*c+l,t}function qt(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=n[4],c=n[5],s=n[6],f=n[7],l=n[8],h=Math.sin(r),d=Math.cos(r);return t[0]=d*e+h*u,t[1]=d*a+h*i,t[2]=d*o+h*c,t[3]=d*u-h*e,t[4]=d*i-h*a,t[5]=d*c-h*o,t[6]=s,t[7]=f,t[8]=l,t}function _t(t,n,r){var e=r[0],a=r[1];return t[0]=e*n[0],t[1]=e*n[1],t[2]=e*n[2],t[3]=a*n[3],t[4]=a*n[4],t[5]=a*n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t}function Ft(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=n[0],t[7]=n[1],t[8]=1,t}function Ct(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=0,t[3]=-r,t[4]=e,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Lt(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=n[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Dt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=0,t[3]=n[2],t[4]=n[3],t[5]=0,t[6]=n[4],t[7]=n[5],t[8]=1,t}function Nt(t,n){var r=n[0],e=n[1],a=n[2],o=n[3],u=r+r,i=e+e,c=a+a,s=r*u,f=e*u,l=e*i,h=a*u,d=a*i,m=a*c,M=o*u,v=o*i,g=o*c;return t[0]=1-l-m,t[3]=f-g,t[6]=h+v,t[1]=f+g,t[4]=1-s-m,t[7]=d-M,t[2]=h-v,t[5]=d+M,t[8]=1-s-l,t}function It(t,n){var r=n[0],e=n[1],a=n[2],o=n[3],u=n[4],i=n[5],c=n[6],s=n[7],f=n[8],l=n[9],h=n[10],d=n[11],m=n[12],M=n[13],v=n[14],g=n[15],p=r*i-e*u,b=r*c-a*u,w=r*s-o*u,x=e*c-a*i,P=e*s-o*i,y=a*s-o*c,S=f*M-l*m,T=f*v-h*m,E=f*g-d*m,A=l*v-h*M,R=l*g-d*M,V=h*g-d*v,q=p*V-b*R+w*A+x*E-P*T+y*S;return q?(q=1/q,t[0]=(i*V-c*R+s*A)*q,t[1]=(c*E-u*V-s*T)*q,t[2]=(u*R-i*E+s*S)*q,t[3]=(a*R-e*V-o*A)*q,t[4]=(r*V-a*E+o*T)*q,t[5]=(e*E-r*R-o*S)*q,t[6]=(M*y-v*P+g*x)*q,t[7]=(v*w-m*y-g*b)*q,t[8]=(m*P-M*w+g*p)*q,t):null}function kt(t,n,r){return t[0]=2/n,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/r,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function jt(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"}function Yt(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2))}function Ut(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t}function Ot(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t}function Bt(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t}function Xt(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t[6]=n[6]+r[6]*e,t[7]=n[7]+r[7]*e,t[8]=n[8]+r[8]*e,t}function zt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]}function Gt(t,n){var r=t[0],e=t[1],a=t[2],o=t[3],u=t[4],i=t[5],c=t[6],s=t[7],f=t[8],l=n[0],h=n[1],m=n[2],M=n[3],v=n[4],g=n[5],p=n[6],b=n[7],w=n[8];return Math.abs(r-l)<=d*Math.max(1,Math.abs(r),Math.abs(l))&&Math.abs(e-h)<=d*Math.max(1,Math.abs(e),Math.abs(h))&&Math.abs(a-m)<=d*Math.max(1,Math.abs(a),Math.abs(m))&&Math.abs(o-M)<=d*Math.max(1,Math.abs(o),Math.abs(M))&&Math.abs(u-v)<=d*Math.max(1,Math.abs(u),Math.abs(v))&&Math.abs(i-g)<=d*Math.max(1,Math.abs(i),Math.abs(g))&&Math.abs(c-p)<=d*Math.max(1,Math.abs(c),Math.abs(p))&&Math.abs(s-b)<=d*Math.max(1,Math.abs(s),Math.abs(b))&&Math.abs(f-w)<=d*Math.max(1,Math.abs(f),Math.abs(w))}var Ht=Rt,Wt=Ot;function Qt(){var t=new m(16);return m!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function Zt(t){var n=new m(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function Kt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function Jt(t,n,r,e,a,o,u,i,c,s,f,l,h,d,M,v){var g=new m(16);return g[0]=t,g[1]=n,g[2]=r,g[3]=e,g[4]=a,g[5]=o,g[6]=u,g[7]=i,g[8]=c,g[9]=s,g[10]=f,g[11]=l,g[12]=h,g[13]=d,g[14]=M,g[15]=v,g}function $t(t,n,r,e,a,o,u,i,c,s,f,l,h,d,m,M,v){return t[0]=n,t[1]=r,t[2]=e,t[3]=a,t[4]=o,t[5]=u,t[6]=i,t[7]=c,t[8]=s,t[9]=f,t[10]=l,t[11]=h,t[12]=d,t[13]=m,t[14]=M,t[15]=v,t}function tn(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function nn(t,n){if(t===n){var r=n[1],e=n[2],a=n[3],o=n[6],u=n[7],i=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=r,t[6]=n[9],t[7]=n[13],t[8]=e,t[9]=o,t[11]=n[14],t[12]=a,t[13]=u,t[14]=i}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t}function rn(t,n){var r=n[0],e=n[1],a=n[2],o=n[3],u=n[4],i=n[5],c=n[6],s=n[7],f=n[8],l=n[9],h=n[10],d=n[11],m=n[12],M=n[13],v=n[14],g=n[15],p=r*i-e*u,b=r*c-a*u,w=r*s-o*u,x=e*c-a*i,P=e*s-o*i,y=a*s-o*c,S=f*M-l*m,T=f*v-h*m,E=f*g-d*m,A=l*v-h*M,R=l*g-d*M,V=h*g-d*v,q=p*V-b*R+w*A+x*E-P*T+y*S;return q?(q=1/q,t[0]=(i*V-c*R+s*A)*q,t[1]=(a*R-e*V-o*A)*q,t[2]=(M*y-v*P+g*x)*q,t[3]=(h*P-l*y-d*x)*q,t[4]=(c*E-u*V-s*T)*q,t[5]=(r*V-a*E+o*T)*q,t[6]=(v*w-m*y-g*b)*q,t[7]=(f*y-h*w+d*b)*q,t[8]=(u*R-i*E+s*S)*q,t[9]=(e*E-r*R-o*S)*q,t[10]=(m*P-M*w+g*p)*q,t[11]=(l*w-f*P-d*p)*q,t[12]=(i*T-u*A-c*S)*q,t[13]=(r*A-e*T+a*S)*q,t[14]=(M*b-m*x-v*p)*q,t[15]=(f*x-l*b+h*p)*q,t):null}function en(t,n){var r=n[0],e=n[1],a=n[2],o=n[3],u=n[4],i=n[5],c=n[6],s=n[7],f=n[8],l=n[9],h=n[10],d=n[11],m=n[12],M=n[13],v=n[14],g=n[15];return t[0]=i*(h*g-d*v)-l*(c*g-s*v)+M*(c*d-s*h),t[1]=-(e*(h*g-d*v)-l*(a*g-o*v)+M*(a*d-o*h)),t[2]=e*(c*g-s*v)-i*(a*g-o*v)+M*(a*s-o*c),t[3]=-(e*(c*d-s*h)-i*(a*d-o*h)+l*(a*s-o*c)),t[4]=-(u*(h*g-d*v)-f*(c*g-s*v)+m*(c*d-s*h)),t[5]=r*(h*g-d*v)-f*(a*g-o*v)+m*(a*d-o*h),t[6]=-(r*(c*g-s*v)-u*(a*g-o*v)+m*(a*s-o*c)),t[7]=r*(c*d-s*h)-u*(a*d-o*h)+f*(a*s-o*c),t[8]=u*(l*g-d*M)-f*(i*g-s*M)+m*(i*d-s*l),t[9]=-(r*(l*g-d*M)-f*(e*g-o*M)+m*(e*d-o*l)),t[10]=r*(i*g-s*M)-u*(e*g-o*M)+m*(e*s-o*i),t[11]=-(r*(i*d-s*l)-u*(e*d-o*l)+f*(e*s-o*i)),t[12]=-(u*(l*v-h*M)-f*(i*v-c*M)+m*(i*h-c*l)),t[13]=r*(l*v-h*M)-f*(e*v-a*M)+m*(e*h-a*l),t[14]=-(r*(i*v-c*M)-u*(e*v-a*M)+m*(e*c-a*i)),t[15]=r*(i*h-c*l)-u*(e*h-a*l)+f*(e*c-a*i),t}function an(t){var n=t[0],r=t[1],e=t[2],a=t[3],o=t[4],u=t[5],i=t[6],c=t[7],s=t[8],f=t[9],l=t[10],h=t[11],d=t[12],m=t[13],M=t[14],v=t[15];return(n*u-r*o)*(l*v-h*M)-(n*i-e*o)*(f*v-h*m)+(n*c-a*o)*(f*M-l*m)+(r*i-e*u)*(s*v-h*d)-(r*c-a*u)*(s*M-l*d)+(e*c-a*i)*(s*m-f*d)}function on(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=n[4],c=n[5],s=n[6],f=n[7],l=n[8],h=n[9],d=n[10],m=n[11],M=n[12],v=n[13],g=n[14],p=n[15],b=r[0],w=r[1],x=r[2],P=r[3];return t[0]=b*e+w*i+x*l+P*M,t[1]=b*a+w*c+x*h+P*v,t[2]=b*o+w*s+x*d+P*g,t[3]=b*u+w*f+x*m+P*p,b=r[4],w=r[5],x=r[6],P=r[7],t[4]=b*e+w*i+x*l+P*M,t[5]=b*a+w*c+x*h+P*v,t[6]=b*o+w*s+x*d+P*g,t[7]=b*u+w*f+x*m+P*p,b=r[8],w=r[9],x=r[10],P=r[11],t[8]=b*e+w*i+x*l+P*M,t[9]=b*a+w*c+x*h+P*v,t[10]=b*o+w*s+x*d+P*g,t[11]=b*u+w*f+x*m+P*p,b=r[12],w=r[13],x=r[14],P=r[15],t[12]=b*e+w*i+x*l+P*M,t[13]=b*a+w*c+x*h+P*v,t[14]=b*o+w*s+x*d+P*g,t[15]=b*u+w*f+x*m+P*p,t}function un(t,n,r){var e=r[0],a=r[1],o=r[2],u=void 0,i=void 0,c=void 0,s=void 0,f=void 0,l=void 0,h=void 0,d=void 0,m=void 0,M=void 0,v=void 0,g=void 0;return n===t?(t[12]=n[0]*e+n[4]*a+n[8]*o+n[12],t[13]=n[1]*e+n[5]*a+n[9]*o+n[13],t[14]=n[2]*e+n[6]*a+n[10]*o+n[14],t[15]=n[3]*e+n[7]*a+n[11]*o+n[15]):(u=n[0],i=n[1],c=n[2],s=n[3],f=n[4],l=n[5],h=n[6],d=n[7],m=n[8],M=n[9],v=n[10],g=n[11],t[0]=u,t[1]=i,t[2]=c,t[3]=s,t[4]=f,t[5]=l,t[6]=h,t[7]=d,t[8]=m,t[9]=M,t[10]=v,t[11]=g,t[12]=u*e+f*a+m*o+n[12],t[13]=i*e+l*a+M*o+n[13],t[14]=c*e+h*a+v*o+n[14],t[15]=s*e+d*a+g*o+n[15]),t}function cn(t,n,r){var e=r[0],a=r[1],o=r[2];return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*a,t[5]=n[5]*a,t[6]=n[6]*a,t[7]=n[7]*a,t[8]=n[8]*o,t[9]=n[9]*o,t[10]=n[10]*o,t[11]=n[11]*o,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function sn(t,n,r,e){var a,o,u,i,c,s,f,l,h,m,M,v,g,p,b,w,x,P,y,S,T,E,A,R,V=e[0],q=e[1],_=e[2],F=Math.sqrt(V*V+q*q+_*_);return F<d?null:(V*=F=1/F,q*=F,_*=F,a=Math.sin(r),u=1-(o=Math.cos(r)),i=n[0],c=n[1],s=n[2],f=n[3],l=n[4],h=n[5],m=n[6],M=n[7],v=n[8],g=n[9],p=n[10],b=n[11],w=V*V*u+o,x=q*V*u+_*a,P=_*V*u-q*a,y=V*q*u-_*a,S=q*q*u+o,T=_*q*u+V*a,E=V*_*u+q*a,A=q*_*u-V*a,R=_*_*u+o,t[0]=i*w+l*x+v*P,t[1]=c*w+h*x+g*P,t[2]=s*w+m*x+p*P,t[3]=f*w+M*x+b*P,t[4]=i*y+l*S+v*T,t[5]=c*y+h*S+g*T,t[6]=s*y+m*S+p*T,t[7]=f*y+M*S+b*T,t[8]=i*E+l*A+v*R,t[9]=c*E+h*A+g*R,t[10]=s*E+m*A+p*R,t[11]=f*E+M*A+b*R,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t)}function fn(t,n,r){var e=Math.sin(r),a=Math.cos(r),o=n[4],u=n[5],i=n[6],c=n[7],s=n[8],f=n[9],l=n[10],h=n[11];return n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[4]=o*a+s*e,t[5]=u*a+f*e,t[6]=i*a+l*e,t[7]=c*a+h*e,t[8]=s*a-o*e,t[9]=f*a-u*e,t[10]=l*a-i*e,t[11]=h*a-c*e,t}function ln(t,n,r){var e=Math.sin(r),a=Math.cos(r),o=n[0],u=n[1],i=n[2],c=n[3],s=n[8],f=n[9],l=n[10],h=n[11];return n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=o*a-s*e,t[1]=u*a-f*e,t[2]=i*a-l*e,t[3]=c*a-h*e,t[8]=o*e+s*a,t[9]=u*e+f*a,t[10]=i*e+l*a,t[11]=c*e+h*a,t}function hn(t,n,r){var e=Math.sin(r),a=Math.cos(r),o=n[0],u=n[1],i=n[2],c=n[3],s=n[4],f=n[5],l=n[6],h=n[7];return n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=o*a+s*e,t[1]=u*a+f*e,t[2]=i*a+l*e,t[3]=c*a+h*e,t[4]=s*a-o*e,t[5]=f*a-u*e,t[6]=l*a-i*e,t[7]=h*a-c*e,t}function dn(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function mn(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Mn(t,n,r){var e,a,o,u=r[0],i=r[1],c=r[2],s=Math.sqrt(u*u+i*i+c*c);return s<d?null:(u*=s=1/s,i*=s,c*=s,e=Math.sin(n),o=1-(a=Math.cos(n)),t[0]=u*u*o+a,t[1]=i*u*o+c*e,t[2]=c*u*o-i*e,t[3]=0,t[4]=u*i*o-c*e,t[5]=i*i*o+a,t[6]=c*i*o+u*e,t[7]=0,t[8]=u*c*o+i*e,t[9]=i*c*o-u*e,t[10]=c*c*o+a,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function vn(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function gn(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function pn(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function bn(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=e+e,c=a+a,s=o+o,f=e*i,l=e*c,h=e*s,d=a*c,m=a*s,M=o*s,v=u*i,g=u*c,p=u*s;return t[0]=1-(d+M),t[1]=l+p,t[2]=h-g,t[3]=0,t[4]=l-p,t[5]=1-(f+M),t[6]=m+v,t[7]=0,t[8]=h+g,t[9]=m-v,t[10]=1-(f+d),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function wn(t,n){var r=new m(3),e=-n[0],a=-n[1],o=-n[2],u=n[3],i=n[4],c=n[5],s=n[6],f=n[7],l=e*e+a*a+o*o+u*u;return l>0?(r[0]=2*(i*u+f*e+c*o-s*a)/l,r[1]=2*(c*u+f*a+s*e-i*o)/l,r[2]=2*(s*u+f*o+i*a-c*e)/l):(r[0]=2*(i*u+f*e+c*o-s*a),r[1]=2*(c*u+f*a+s*e-i*o),r[2]=2*(s*u+f*o+i*a-c*e)),bn(t,n,r),t}function xn(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t}function Pn(t,n){var r=n[0],e=n[1],a=n[2],o=n[4],u=n[5],i=n[6],c=n[8],s=n[9],f=n[10];return t[0]=Math.sqrt(r*r+e*e+a*a),t[1]=Math.sqrt(o*o+u*u+i*i),t[2]=Math.sqrt(c*c+s*s+f*f),t}function yn(t,n){var r=n[0]+n[5]+n[10],e=0;return r>0?(e=2*Math.sqrt(r+1),t[3]=.25*e,t[0]=(n[6]-n[9])/e,t[1]=(n[8]-n[2])/e,t[2]=(n[1]-n[4])/e):n[0]>n[5]&&n[0]>n[10]?(e=2*Math.sqrt(1+n[0]-n[5]-n[10]),t[3]=(n[6]-n[9])/e,t[0]=.25*e,t[1]=(n[1]+n[4])/e,t[2]=(n[8]+n[2])/e):n[5]>n[10]?(e=2*Math.sqrt(1+n[5]-n[0]-n[10]),t[3]=(n[8]-n[2])/e,t[0]=(n[1]+n[4])/e,t[1]=.25*e,t[2]=(n[6]+n[9])/e):(e=2*Math.sqrt(1+n[10]-n[0]-n[5]),t[3]=(n[1]-n[4])/e,t[0]=(n[8]+n[2])/e,t[1]=(n[6]+n[9])/e,t[2]=.25*e),t}function Sn(t,n,r,e){var a=n[0],o=n[1],u=n[2],i=n[3],c=a+a,s=o+o,f=u+u,l=a*c,h=a*s,d=a*f,m=o*s,M=o*f,v=u*f,g=i*c,p=i*s,b=i*f,w=e[0],x=e[1],P=e[2];return t[0]=(1-(m+v))*w,t[1]=(h+b)*w,t[2]=(d-p)*w,t[3]=0,t[4]=(h-b)*x,t[5]=(1-(l+v))*x,t[6]=(M+g)*x,t[7]=0,t[8]=(d+p)*P,t[9]=(M-g)*P,t[10]=(1-(l+m))*P,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function Tn(t,n,r,e,a){var o=n[0],u=n[1],i=n[2],c=n[3],s=o+o,f=u+u,l=i+i,h=o*s,d=o*f,m=o*l,M=u*f,v=u*l,g=i*l,p=c*s,b=c*f,w=c*l,x=e[0],P=e[1],y=e[2],S=a[0],T=a[1],E=a[2],A=(1-(M+g))*x,R=(d+w)*x,V=(m-b)*x,q=(d-w)*P,_=(1-(h+g))*P,F=(v+p)*P,C=(m+b)*y,L=(v-p)*y,D=(1-(h+M))*y;return t[0]=A,t[1]=R,t[2]=V,t[3]=0,t[4]=q,t[5]=_,t[6]=F,t[7]=0,t[8]=C,t[9]=L,t[10]=D,t[11]=0,t[12]=r[0]+S-(A*S+q*T+C*E),t[13]=r[1]+T-(R*S+_*T+L*E),t[14]=r[2]+E-(V*S+F*T+D*E),t[15]=1,t}function En(t,n){var r=n[0],e=n[1],a=n[2],o=n[3],u=r+r,i=e+e,c=a+a,s=r*u,f=e*u,l=e*i,h=a*u,d=a*i,m=a*c,M=o*u,v=o*i,g=o*c;return t[0]=1-l-m,t[1]=f+g,t[2]=h-v,t[3]=0,t[4]=f-g,t[5]=1-s-m,t[6]=d+M,t[7]=0,t[8]=h+v,t[9]=d-M,t[10]=1-s-l,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function An(t,n,r,e,a,o,u){var i=1/(r-n),c=1/(a-e),s=1/(o-u);return t[0]=2*o*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*o*c,t[6]=0,t[7]=0,t[8]=(r+n)*i,t[9]=(a+e)*c,t[10]=(u+o)*s,t[11]=-1,t[12]=0,t[13]=0,t[14]=u*o*2*s,t[15]=0,t}function Rn(t,n,r,e,a){var o=1/Math.tan(n/2),u=void 0;return t[0]=o/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=a&&a!==1/0?(u=1/(e-a),t[10]=(a+e)*u,t[14]=2*a*e*u):(t[10]=-1,t[14]=-2*e),t}function Vn(t,n,r,e){var a=Math.tan(n.upDegrees*Math.PI/180),o=Math.tan(n.downDegrees*Math.PI/180),u=Math.tan(n.leftDegrees*Math.PI/180),i=Math.tan(n.rightDegrees*Math.PI/180),c=2/(u+i),s=2/(a+o);return t[0]=c,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=s,t[6]=0,t[7]=0,t[8]=-(u-i)*c*.5,t[9]=(a-o)*s*.5,t[10]=e/(r-e),t[11]=-1,t[12]=0,t[13]=0,t[14]=e*r/(r-e),t[15]=0,t}function qn(t,n,r,e,a,o,u){var i=1/(n-r),c=1/(e-a),s=1/(o-u);return t[0]=-2*i,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*s,t[11]=0,t[12]=(n+r)*i,t[13]=(a+e)*c,t[14]=(u+o)*s,t[15]=1,t}function _n(t,n,r,e){var a=void 0,o=void 0,u=void 0,i=void 0,c=void 0,s=void 0,f=void 0,l=void 0,h=void 0,m=void 0,M=n[0],v=n[1],g=n[2],p=e[0],b=e[1],w=e[2],x=r[0],P=r[1],y=r[2];return Math.abs(M-x)<d&&Math.abs(v-P)<d&&Math.abs(g-y)<d?tn(t):(f=M-x,l=v-P,h=g-y,a=b*(h*=m=1/Math.sqrt(f*f+l*l+h*h))-w*(l*=m),o=w*(f*=m)-p*h,u=p*l-b*f,(m=Math.sqrt(a*a+o*o+u*u))?(a*=m=1/m,o*=m,u*=m):(a=0,o=0,u=0),i=l*u-h*o,c=h*a-f*u,s=f*o-l*a,(m=Math.sqrt(i*i+c*c+s*s))?(i*=m=1/m,c*=m,s*=m):(i=0,c=0,s=0),t[0]=a,t[1]=i,t[2]=f,t[3]=0,t[4]=o,t[5]=c,t[6]=l,t[7]=0,t[8]=u,t[9]=s,t[10]=h,t[11]=0,t[12]=-(a*M+o*v+u*g),t[13]=-(i*M+c*v+s*g),t[14]=-(f*M+l*v+h*g),t[15]=1,t)}function Fn(t,n,r,e){var a=n[0],o=n[1],u=n[2],i=e[0],c=e[1],s=e[2],f=a-r[0],l=o-r[1],h=u-r[2],d=f*f+l*l+h*h;d>0&&(f*=d=1/Math.sqrt(d),l*=d,h*=d);var m=c*h-s*l,M=s*f-i*h,v=i*l-c*f;return(d=m*m+M*M+v*v)>0&&(m*=d=1/Math.sqrt(d),M*=d,v*=d),t[0]=m,t[1]=M,t[2]=v,t[3]=0,t[4]=l*v-h*M,t[5]=h*m-f*v,t[6]=f*M-l*m,t[7]=0,t[8]=f,t[9]=l,t[10]=h,t[11]=0,t[12]=a,t[13]=o,t[14]=u,t[15]=1,t}function Cn(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function Ln(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))}function Dn(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t[9]=n[9]+r[9],t[10]=n[10]+r[10],t[11]=n[11]+r[11],t[12]=n[12]+r[12],t[13]=n[13]+r[13],t[14]=n[14]+r[14],t[15]=n[15]+r[15],t}function Nn(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t[9]=n[9]-r[9],t[10]=n[10]-r[10],t[11]=n[11]-r[11],t[12]=n[12]-r[12],t[13]=n[13]-r[13],t[14]=n[14]-r[14],t[15]=n[15]-r[15],t}function In(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=n[11]*r,t[12]=n[12]*r,t[13]=n[13]*r,t[14]=n[14]*r,t[15]=n[15]*r,t}function kn(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t[6]=n[6]+r[6]*e,t[7]=n[7]+r[7]*e,t[8]=n[8]+r[8]*e,t[9]=n[9]+r[9]*e,t[10]=n[10]+r[10]*e,t[11]=n[11]+r[11]*e,t[12]=n[12]+r[12]*e,t[13]=n[13]+r[13]*e,t[14]=n[14]+r[14]*e,t[15]=n[15]+r[15]*e,t}function jn(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]}function Yn(t,n){var r=t[0],e=t[1],a=t[2],o=t[3],u=t[4],i=t[5],c=t[6],s=t[7],f=t[8],l=t[9],h=t[10],m=t[11],M=t[12],v=t[13],g=t[14],p=t[15],b=n[0],w=n[1],x=n[2],P=n[3],y=n[4],S=n[5],T=n[6],E=n[7],A=n[8],R=n[9],V=n[10],q=n[11],_=n[12],F=n[13],C=n[14],L=n[15];return Math.abs(r-b)<=d*Math.max(1,Math.abs(r),Math.abs(b))&&Math.abs(e-w)<=d*Math.max(1,Math.abs(e),Math.abs(w))&&Math.abs(a-x)<=d*Math.max(1,Math.abs(a),Math.abs(x))&&Math.abs(o-P)<=d*Math.max(1,Math.abs(o),Math.abs(P))&&Math.abs(u-y)<=d*Math.max(1,Math.abs(u),Math.abs(y))&&Math.abs(i-S)<=d*Math.max(1,Math.abs(i),Math.abs(S))&&Math.abs(c-T)<=d*Math.max(1,Math.abs(c),Math.abs(T))&&Math.abs(s-E)<=d*Math.max(1,Math.abs(s),Math.abs(E))&&Math.abs(f-A)<=d*Math.max(1,Math.abs(f),Math.abs(A))&&Math.abs(l-R)<=d*Math.max(1,Math.abs(l),Math.abs(R))&&Math.abs(h-V)<=d*Math.max(1,Math.abs(h),Math.abs(V))&&Math.abs(m-q)<=d*Math.max(1,Math.abs(m),Math.abs(q))&&Math.abs(M-_)<=d*Math.max(1,Math.abs(M),Math.abs(_))&&Math.abs(v-F)<=d*Math.max(1,Math.abs(v),Math.abs(F))&&Math.abs(g-C)<=d*Math.max(1,Math.abs(g),Math.abs(C))&&Math.abs(p-L)<=d*Math.max(1,Math.abs(p),Math.abs(L))}var Un=on,On=Nn;function Bn(){var t=new m(3);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function Xn(t){var n=new m(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n}function zn(t){var n=t[0],r=t[1],e=t[2];return Math.sqrt(n*n+r*r+e*e)}function Gn(t,n,r){var e=new m(3);return e[0]=t,e[1]=n,e[2]=r,e}function Hn(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t}function Wn(t,n,r,e){return t[0]=n,t[1]=r,t[2]=e,t}function Qn(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t}function Zn(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t}function Kn(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t}function Jn(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t}function $n(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t}function tr(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t}function nr(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t}function rr(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t}function er(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t}function ar(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t}function or(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t}function ur(t,n){var r=n[0]-t[0],e=n[1]-t[1],a=n[2]-t[2];return Math.sqrt(r*r+e*e+a*a)}function ir(t,n){var r=n[0]-t[0],e=n[1]-t[1],a=n[2]-t[2];return r*r+e*e+a*a}function cr(t){var n=t[0],r=t[1],e=t[2];return n*n+r*r+e*e}function sr(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t}function fr(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t}function lr(t,n){var r=n[0],e=n[1],a=n[2],o=r*r+e*e+a*a;return o>0&&(o=1/Math.sqrt(o),t[0]=n[0]*o,t[1]=n[1]*o,t[2]=n[2]*o),t}function hr(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function dr(t,n,r){var e=n[0],a=n[1],o=n[2],u=r[0],i=r[1],c=r[2];return t[0]=a*c-o*i,t[1]=o*u-e*c,t[2]=e*i-a*u,t}function mr(t,n,r,e){var a=n[0],o=n[1],u=n[2];return t[0]=a+e*(r[0]-a),t[1]=o+e*(r[1]-o),t[2]=u+e*(r[2]-u),t}function Mr(t,n,r,e,a,o){var u=o*o,i=u*(2*o-3)+1,c=u*(o-2)+o,s=u*(o-1),f=u*(3-2*o);return t[0]=n[0]*i+r[0]*c+e[0]*s+a[0]*f,t[1]=n[1]*i+r[1]*c+e[1]*s+a[1]*f,t[2]=n[2]*i+r[2]*c+e[2]*s+a[2]*f,t}function vr(t,n,r,e,a,o){var u=1-o,i=u*u,c=o*o,s=i*u,f=3*o*i,l=3*c*u,h=c*o;return t[0]=n[0]*s+r[0]*f+e[0]*l+a[0]*h,t[1]=n[1]*s+r[1]*f+e[1]*l+a[1]*h,t[2]=n[2]*s+r[2]*f+e[2]*l+a[2]*h,t}function gr(t,n){n=n||1;var r=2*M()*Math.PI,e=2*M()-1,a=Math.sqrt(1-e*e)*n;return t[0]=Math.cos(r)*a,t[1]=Math.sin(r)*a,t[2]=e*n,t}function pr(t,n,r){var e=n[0],a=n[1],o=n[2],u=r[3]*e+r[7]*a+r[11]*o+r[15];return u=u||1,t[0]=(r[0]*e+r[4]*a+r[8]*o+r[12])/u,t[1]=(r[1]*e+r[5]*a+r[9]*o+r[13])/u,t[2]=(r[2]*e+r[6]*a+r[10]*o+r[14])/u,t}function br(t,n,r){var e=n[0],a=n[1],o=n[2];return t[0]=e*r[0]+a*r[3]+o*r[6],t[1]=e*r[1]+a*r[4]+o*r[7],t[2]=e*r[2]+a*r[5]+o*r[8],t}function wr(t,n,r){var e=r[0],a=r[1],o=r[2],u=r[3],i=n[0],c=n[1],s=n[2],f=a*s-o*c,l=o*i-e*s,h=e*c-a*i,d=a*h-o*l,m=o*f-e*h,M=e*l-a*f,v=2*u;return f*=v,l*=v,h*=v,d*=2,m*=2,M*=2,t[0]=i+f+d,t[1]=c+l+m,t[2]=s+h+M,t}function xr(t,n,r,e){var a=[],o=[];return a[0]=n[0]-r[0],a[1]=n[1]-r[1],a[2]=n[2]-r[2],o[0]=a[0],o[1]=a[1]*Math.cos(e)-a[2]*Math.sin(e),o[2]=a[1]*Math.sin(e)+a[2]*Math.cos(e),t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t}function Pr(t,n,r,e){var a=[],o=[];return a[0]=n[0]-r[0],a[1]=n[1]-r[1],a[2]=n[2]-r[2],o[0]=a[2]*Math.sin(e)+a[0]*Math.cos(e),o[1]=a[1],o[2]=a[2]*Math.cos(e)-a[0]*Math.sin(e),t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t}function yr(t,n,r,e){var a=[],o=[];return a[0]=n[0]-r[0],a[1]=n[1]-r[1],a[2]=n[2]-r[2],o[0]=a[0]*Math.cos(e)-a[1]*Math.sin(e),o[1]=a[0]*Math.sin(e)+a[1]*Math.cos(e),o[2]=a[2],t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t}function Sr(t,n){var r=Gn(t[0],t[1],t[2]),e=Gn(n[0],n[1],n[2]);lr(r,r),lr(e,e);var a=hr(r,e);return a>1?0:a<-1?Math.PI:Math.acos(a)}function Tr(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Er(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]}function Ar(t,n){var r=t[0],e=t[1],a=t[2],o=n[0],u=n[1],i=n[2];return Math.abs(r-o)<=d*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(e-u)<=d*Math.max(1,Math.abs(e),Math.abs(u))&&Math.abs(a-i)<=d*Math.max(1,Math.abs(a),Math.abs(i))}var Rr=Zn,Vr=Kn,qr=Jn,_r=ur,Fr=ir,Cr=zn,Lr=cr,Dr=function(){var t=Bn();return function(n,r,e,a,o,u){var i=void 0,c=void 0;for(r||(r=3),e||(e=0),c=a?Math.min(a*r+e,n.length):n.length,i=e;i<c;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],o(t,t,u),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2];return n}}();function Nr(){var t=new m(4);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t}function Ir(t){var n=new m(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function kr(t,n,r,e){var a=new m(4);return a[0]=t,a[1]=n,a[2]=r,a[3]=e,a}function jr(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function Yr(t,n,r,e,a){return t[0]=n,t[1]=r,t[2]=e,t[3]=a,t}function Ur(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t}function Or(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t}function Br(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t[3]=n[3]*r[3],t}function Xr(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t[3]=n[3]/r[3],t}function zr(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t[3]=Math.ceil(n[3]),t}function Gr(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t[3]=Math.floor(n[3]),t}function Hr(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t[3]=Math.min(n[3],r[3]),t}function Wr(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t[3]=Math.max(n[3],r[3]),t}function Qr(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t[3]=Math.round(n[3]),t}function Zr(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t}function Kr(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t}function Jr(t,n){var r=n[0]-t[0],e=n[1]-t[1],a=n[2]-t[2],o=n[3]-t[3];return Math.sqrt(r*r+e*e+a*a+o*o)}function $r(t,n){var r=n[0]-t[0],e=n[1]-t[1],a=n[2]-t[2],o=n[3]-t[3];return r*r+e*e+a*a+o*o}function te(t){var n=t[0],r=t[1],e=t[2],a=t[3];return Math.sqrt(n*n+r*r+e*e+a*a)}function ne(t){var n=t[0],r=t[1],e=t[2],a=t[3];return n*n+r*r+e*e+a*a}function re(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=-n[3],t}function ee(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t[3]=1/n[3],t}function ae(t,n){var r=n[0],e=n[1],a=n[2],o=n[3],u=r*r+e*e+a*a+o*o;return u>0&&(u=1/Math.sqrt(u),t[0]=r*u,t[1]=e*u,t[2]=a*u,t[3]=o*u),t}function oe(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]}function ue(t,n,r,e){var a=n[0],o=n[1],u=n[2],i=n[3];return t[0]=a+e*(r[0]-a),t[1]=o+e*(r[1]-o),t[2]=u+e*(r[2]-u),t[3]=i+e*(r[3]-i),t}function ie(t,n){var r,e,a,o,u,i;n=n||1;do{u=(r=2*M()-1)*r+(e=2*M()-1)*e}while(u>=1);do{i=(a=2*M()-1)*a+(o=2*M()-1)*o}while(i>=1);var c=Math.sqrt((1-u)/i);return t[0]=n*r,t[1]=n*e,t[2]=n*a*c,t[3]=n*o*c,t}function ce(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3];return t[0]=r[0]*e+r[4]*a+r[8]*o+r[12]*u,t[1]=r[1]*e+r[5]*a+r[9]*o+r[13]*u,t[2]=r[2]*e+r[6]*a+r[10]*o+r[14]*u,t[3]=r[3]*e+r[7]*a+r[11]*o+r[15]*u,t}function se(t,n,r){var e=n[0],a=n[1],o=n[2],u=r[0],i=r[1],c=r[2],s=r[3],f=s*e+i*o-c*a,l=s*a+c*e-u*o,h=s*o+u*a-i*e,d=-u*e-i*a-c*o;return t[0]=f*s+d*-u+l*-c-h*-i,t[1]=l*s+d*-i+h*-u-f*-c,t[2]=h*s+d*-c+f*-i-l*-u,t[3]=n[3],t}function fe(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function le(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]}function he(t,n){var r=t[0],e=t[1],a=t[2],o=t[3],u=n[0],i=n[1],c=n[2],s=n[3];return Math.abs(r-u)<=d*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(e-i)<=d*Math.max(1,Math.abs(e),Math.abs(i))&&Math.abs(a-c)<=d*Math.max(1,Math.abs(a),Math.abs(c))&&Math.abs(o-s)<=d*Math.max(1,Math.abs(o),Math.abs(s))}var de=Or,me=Br,Me=Xr,ve=Jr,ge=$r,pe=te,be=ne,we=function(){var t=Nr();return function(n,r,e,a,o,u){var i=void 0,c=void 0;for(r||(r=4),e||(e=0),c=a?Math.min(a*r+e,n.length):n.length,i=e;i<c;i+=r)t[0]=n[i],t[1]=n[i+1],t[2]=n[i+2],t[3]=n[i+3],o(t,t,u),n[i]=t[0],n[i+1]=t[1],n[i+2]=t[2],n[i+3]=t[3];return n}}();function xe(){var t=new m(4);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function Pe(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function ye(t,n,r){r*=.5;var e=Math.sin(r);return t[0]=e*n[0],t[1]=e*n[1],t[2]=e*n[2],t[3]=Math.cos(r),t}function Se(t,n){var r=2*Math.acos(n[3]),e=Math.sin(r/2);return e>d?(t[0]=n[0]/e,t[1]=n[1]/e,t[2]=n[2]/e):(t[0]=1,t[1]=0,t[2]=0),r}function Te(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=r[0],c=r[1],s=r[2],f=r[3];return t[0]=e*f+u*i+a*s-o*c,t[1]=a*f+u*c+o*i-e*s,t[2]=o*f+u*s+e*c-a*i,t[3]=u*f-e*i-a*c-o*s,t}function Ee(t,n,r){r*=.5;var e=n[0],a=n[1],o=n[2],u=n[3],i=Math.sin(r),c=Math.cos(r);return t[0]=e*c+u*i,t[1]=a*c+o*i,t[2]=o*c-a*i,t[3]=u*c-e*i,t}function Ae(t,n,r){r*=.5;var e=n[0],a=n[1],o=n[2],u=n[3],i=Math.sin(r),c=Math.cos(r);return t[0]=e*c-o*i,t[1]=a*c+u*i,t[2]=o*c+e*i,t[3]=u*c-a*i,t}function Re(t,n,r){r*=.5;var e=n[0],a=n[1],o=n[2],u=n[3],i=Math.sin(r),c=Math.cos(r);return t[0]=e*c+a*i,t[1]=a*c-e*i,t[2]=o*c+u*i,t[3]=u*c-o*i,t}function Ve(t,n){var r=n[0],e=n[1],a=n[2];return t[0]=r,t[1]=e,t[2]=a,t[3]=Math.sqrt(Math.abs(1-r*r-e*e-a*a)),t}function qe(t,n,r,e){var a=n[0],o=n[1],u=n[2],i=n[3],c=r[0],s=r[1],f=r[2],l=r[3],h=void 0,m=void 0,M=void 0,v=void 0,g=void 0;return(m=a*c+o*s+u*f+i*l)<0&&(m=-m,c=-c,s=-s,f=-f,l=-l),1-m>d?(h=Math.acos(m),M=Math.sin(h),v=Math.sin((1-e)*h)/M,g=Math.sin(e*h)/M):(v=1-e,g=e),t[0]=v*a+g*c,t[1]=v*o+g*s,t[2]=v*u+g*f,t[3]=v*i+g*l,t}function _e(t){var n=M(),r=M(),e=M(),a=Math.sqrt(1-n),o=Math.sqrt(n);return t[0]=a*Math.sin(2*Math.PI*r),t[1]=a*Math.cos(2*Math.PI*r),t[2]=o*Math.sin(2*Math.PI*e),t[3]=o*Math.cos(2*Math.PI*e),t}function Fe(t,n){var r=n[0],e=n[1],a=n[2],o=n[3],u=r*r+e*e+a*a+o*o,i=u?1/u:0;return t[0]=-r*i,t[1]=-e*i,t[2]=-a*i,t[3]=o*i,t}function Ce(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t}function Le(t,n){var r=n[0]+n[4]+n[8],e=void 0;if(r>0)e=Math.sqrt(r+1),t[3]=.5*e,e=.5/e,t[0]=(n[5]-n[7])*e,t[1]=(n[6]-n[2])*e,t[2]=(n[1]-n[3])*e;else{var a=0;n[4]>n[0]&&(a=1),n[8]>n[3*a+a]&&(a=2);var o=(a+1)%3,u=(a+2)%3;e=Math.sqrt(n[3*a+a]-n[3*o+o]-n[3*u+u]+1),t[a]=.5*e,e=.5/e,t[3]=(n[3*o+u]-n[3*u+o])*e,t[o]=(n[3*o+a]+n[3*a+o])*e,t[u]=(n[3*u+a]+n[3*a+u])*e}return t}function De(t,n,r,e){var a=.5*Math.PI/180;n*=a,r*=a,e*=a;var o=Math.sin(n),u=Math.cos(n),i=Math.sin(r),c=Math.cos(r),s=Math.sin(e),f=Math.cos(e);return t[0]=o*c*f-u*i*s,t[1]=u*i*f+o*c*s,t[2]=u*c*s-o*i*f,t[3]=u*c*f+o*i*s,t}function Ne(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}var Ie=Ir,ke=kr,je=jr,Ye=Yr,Ue=Ur,Oe=Te,Be=Zr,Xe=oe,ze=ue,Ge=te,He=Ge,We=ne,Qe=We,Ze=ae,Ke=le,Je=he,$e=function(){var t=Bn(),n=Gn(1,0,0),r=Gn(0,1,0);return function(e,a,o){var u=hr(a,o);return u<-.999999?(dr(t,n,a),Cr(t)<1e-6&&dr(t,r,a),lr(t,t),ye(e,t,Math.PI),e):u>.999999?(e[0]=0,e[1]=0,e[2]=0,e[3]=1,e):(dr(t,a,o),e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=1+u,Ze(e,e))}}(),ta=function(){var t=xe(),n=xe();return function(r,e,a,o,u,i){return qe(t,e,u,i),qe(n,a,o,i),qe(r,t,n,2*i*(1-i)),r}}(),na=function(){var t=gt();return function(n,r,e,a){return t[0]=e[0],t[3]=e[1],t[6]=e[2],t[1]=a[0],t[4]=a[1],t[7]=a[2],t[2]=-r[0],t[5]=-r[1],t[8]=-r[2],Ze(n,Le(n,t))}}();function ra(){var t=new m(8);return m!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0),t[3]=1,t}function ea(t){var n=new m(8);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n}function aa(t,n,r,e,a,o,u,i){var c=new m(8);return c[0]=t,c[1]=n,c[2]=r,c[3]=e,c[4]=a,c[5]=o,c[6]=u,c[7]=i,c}function oa(t,n,r,e,a,o,u){var i=new m(8);i[0]=t,i[1]=n,i[2]=r,i[3]=e;var c=.5*a,s=.5*o,f=.5*u;return i[4]=c*e+s*r-f*n,i[5]=s*e+f*t-c*r,i[6]=f*e+c*n-s*t,i[7]=-c*t-s*n-f*r,i}function ua(t,n,r){var e=.5*r[0],a=.5*r[1],o=.5*r[2],u=n[0],i=n[1],c=n[2],s=n[3];return t[0]=u,t[1]=i,t[2]=c,t[3]=s,t[4]=e*s+a*c-o*i,t[5]=a*s+o*u-e*c,t[6]=o*s+e*i-a*u,t[7]=-e*u-a*i-o*c,t}function ia(t,n){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=.5*n[0],t[5]=.5*n[1],t[6]=.5*n[2],t[7]=0,t}function ca(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=0,t[5]=0,t[6]=0,t[7]=0,t}function sa(t,n){var r=xe();yn(r,n);var e=new m(3);return xn(e,n),ua(t,r,e),t}function fa(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t}function la(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t}function ha(t,n,r,e,a,o,u,i,c){return t[0]=n,t[1]=r,t[2]=e,t[3]=a,t[4]=o,t[5]=u,t[6]=i,t[7]=c,t}var da=je;function ma(t,n){return t[0]=n[4],t[1]=n[5],t[2]=n[6],t[3]=n[7],t}var Ma=je;function va(t,n){return t[4]=n[0],t[5]=n[1],t[6]=n[2],t[7]=n[3],t}function ga(t,n){var r=n[4],e=n[5],a=n[6],o=n[7],u=-n[0],i=-n[1],c=-n[2],s=n[3];return t[0]=2*(r*s+o*u+e*c-a*i),t[1]=2*(e*s+o*i+a*u-r*c),t[2]=2*(a*s+o*c+r*i-e*u),t}function pa(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=.5*r[0],c=.5*r[1],s=.5*r[2],f=n[4],l=n[5],h=n[6],d=n[7];return t[0]=e,t[1]=a,t[2]=o,t[3]=u,t[4]=u*i+a*s-o*c+f,t[5]=u*c+o*i-e*s+l,t[6]=u*s+e*c-a*i+h,t[7]=-e*i-a*c-o*s+d,t}function ba(t,n,r){var e=-n[0],a=-n[1],o=-n[2],u=n[3],i=n[4],c=n[5],s=n[6],f=n[7],l=i*u+f*e+c*o-s*a,h=c*u+f*a+s*e-i*o,d=s*u+f*o+i*a-c*e,m=f*u-i*e-c*a-s*o;return Ee(t,n,r),e=t[0],a=t[1],o=t[2],u=t[3],t[4]=l*u+m*e+h*o-d*a,t[5]=h*u+m*a+d*e-l*o,t[6]=d*u+m*o+l*a-h*e,t[7]=m*u-l*e-h*a-d*o,t}function wa(t,n,r){var e=-n[0],a=-n[1],o=-n[2],u=n[3],i=n[4],c=n[5],s=n[6],f=n[7],l=i*u+f*e+c*o-s*a,h=c*u+f*a+s*e-i*o,d=s*u+f*o+i*a-c*e,m=f*u-i*e-c*a-s*o;return Ae(t,n,r),e=t[0],a=t[1],o=t[2],u=t[3],t[4]=l*u+m*e+h*o-d*a,t[5]=h*u+m*a+d*e-l*o,t[6]=d*u+m*o+l*a-h*e,t[7]=m*u-l*e-h*a-d*o,t}function xa(t,n,r){var e=-n[0],a=-n[1],o=-n[2],u=n[3],i=n[4],c=n[5],s=n[6],f=n[7],l=i*u+f*e+c*o-s*a,h=c*u+f*a+s*e-i*o,d=s*u+f*o+i*a-c*e,m=f*u-i*e-c*a-s*o;return Re(t,n,r),e=t[0],a=t[1],o=t[2],u=t[3],t[4]=l*u+m*e+h*o-d*a,t[5]=h*u+m*a+d*e-l*o,t[6]=d*u+m*o+l*a-h*e,t[7]=m*u-l*e-h*a-d*o,t}function Pa(t,n,r){var e=r[0],a=r[1],o=r[2],u=r[3],i=n[0],c=n[1],s=n[2],f=n[3];return t[0]=i*u+f*e+c*o-s*a,t[1]=c*u+f*a+s*e-i*o,t[2]=s*u+f*o+i*a-c*e,t[3]=f*u-i*e-c*a-s*o,i=n[4],c=n[5],s=n[6],f=n[7],t[4]=i*u+f*e+c*o-s*a,t[5]=c*u+f*a+s*e-i*o,t[6]=s*u+f*o+i*a-c*e,t[7]=f*u-i*e-c*a-s*o,t}function ya(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=r[0],c=r[1],s=r[2],f=r[3];return t[0]=e*f+u*i+a*s-o*c,t[1]=a*f+u*c+o*i-e*s,t[2]=o*f+u*s+e*c-a*i,t[3]=u*f-e*i-a*c-o*s,i=r[4],c=r[5],s=r[6],f=r[7],t[4]=e*f+u*i+a*s-o*c,t[5]=a*f+u*c+o*i-e*s,t[6]=o*f+u*s+e*c-a*i,t[7]=u*f-e*i-a*c-o*s,t}function Sa(t,n,r,e){if(Math.abs(e)<d)return fa(t,n);var a=Math.sqrt(r[0]*r[0]+r[1]*r[1]+r[2]*r[2]);e*=.5;var o=Math.sin(e),u=o*r[0]/a,i=o*r[1]/a,c=o*r[2]/a,s=Math.cos(e),f=n[0],l=n[1],h=n[2],m=n[3];t[0]=f*s+m*u+l*c-h*i,t[1]=l*s+m*i+h*u-f*c,t[2]=h*s+m*c+f*i-l*u,t[3]=m*s-f*u-l*i-h*c;var M=n[4],v=n[5],g=n[6],p=n[7];return t[4]=M*s+p*u+v*c-g*i,t[5]=v*s+p*i+g*u-M*c,t[6]=g*s+p*c+M*i-v*u,t[7]=p*s-M*u-v*i-g*c,t}function Ta(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t}function Ea(t,n,r){var e=n[0],a=n[1],o=n[2],u=n[3],i=r[4],c=r[5],s=r[6],f=r[7],l=n[4],h=n[5],d=n[6],m=n[7],M=r[0],v=r[1],g=r[2],p=r[3];return t[0]=e*p+u*M+a*g-o*v,t[1]=a*p+u*v+o*M-e*g,t[2]=o*p+u*g+e*v-a*M,t[3]=u*p-e*M-a*v-o*g,t[4]=e*f+u*i+a*s-o*c+l*p+m*M+h*g-d*v,t[5]=a*f+u*c+o*i-e*s+h*p+m*v+d*M-l*g,t[6]=o*f+u*s+e*c-a*i+d*p+m*g+l*v-h*M,t[7]=u*f-e*i-a*c-o*s+m*p-l*M-h*v-d*g,t}var Aa=Ea;function Ra(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t}var Va=Xe;function qa(t,n,r,e){var a=1-e;return Va(n,r)<0&&(e=-e),t[0]=n[0]*a+r[0]*e,t[1]=n[1]*a+r[1]*e,t[2]=n[2]*a+r[2]*e,t[3]=n[3]*a+r[3]*e,t[4]=n[4]*a+r[4]*e,t[5]=n[5]*a+r[5]*e,t[6]=n[6]*a+r[6]*e,t[7]=n[7]*a+r[7]*e,t}function _a(t,n){var r=Da(n);return t[0]=-n[0]/r,t[1]=-n[1]/r,t[2]=-n[2]/r,t[3]=n[3]/r,t[4]=-n[4]/r,t[5]=-n[5]/r,t[6]=-n[6]/r,t[7]=n[7]/r,t}function Fa(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t[4]=-n[4],t[5]=-n[5],t[6]=-n[6],t[7]=n[7],t}var Ca=Ge,La=Ca,Da=We,Na=Da;function Ia(t,n){var r=Da(n);if(r>0){r=Math.sqrt(r);var e=n[0]/r,a=n[1]/r,o=n[2]/r,u=n[3]/r,i=n[4],c=n[5],s=n[6],f=n[7],l=e*i+a*c+o*s+u*f;t[0]=e,t[1]=a,t[2]=o,t[3]=u,t[4]=(i-e*l)/r,t[5]=(c-a*l)/r,t[6]=(s-o*l)/r,t[7]=(f-u*l)/r}return t}function ka(t){return"quat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+")"}function ja(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]}function Ya(t,n){var r=t[0],e=t[1],a=t[2],o=t[3],u=t[4],i=t[5],c=t[6],s=t[7],f=n[0],l=n[1],h=n[2],m=n[3],M=n[4],v=n[5],g=n[6],p=n[7];return Math.abs(r-f)<=d*Math.max(1,Math.abs(r),Math.abs(f))&&Math.abs(e-l)<=d*Math.max(1,Math.abs(e),Math.abs(l))&&Math.abs(a-h)<=d*Math.max(1,Math.abs(a),Math.abs(h))&&Math.abs(o-m)<=d*Math.max(1,Math.abs(o),Math.abs(m))&&Math.abs(u-M)<=d*Math.max(1,Math.abs(u),Math.abs(M))&&Math.abs(i-v)<=d*Math.max(1,Math.abs(i),Math.abs(v))&&Math.abs(c-g)<=d*Math.max(1,Math.abs(c),Math.abs(g))&&Math.abs(s-p)<=d*Math.max(1,Math.abs(s),Math.abs(p))}function Ua(){var t=new m(2);return m!=Float32Array&&(t[0]=0,t[1]=0),t}function Oa(t){var n=new m(2);return n[0]=t[0],n[1]=t[1],n}function Ba(t,n){var r=new m(2);return r[0]=t,r[1]=n,r}function Xa(t,n){return t[0]=n[0],t[1]=n[1],t}function za(t,n,r){return t[0]=n,t[1]=r,t}function Ga(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t}function Ha(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t}function Wa(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t}function Qa(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t}function Za(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t}function Ka(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t}function Ja(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t}function $a(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t}function to(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t}function no(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t}function ro(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t}function eo(t,n){var r=n[0]-t[0],e=n[1]-t[1];return Math.sqrt(r*r+e*e)}function ao(t,n){var r=n[0]-t[0],e=n[1]-t[1];return r*r+e*e}function oo(t){var n=t[0],r=t[1];return Math.sqrt(n*n+r*r)}function uo(t){var n=t[0],r=t[1];return n*n+r*r}function io(t,n){return t[0]=-n[0],t[1]=-n[1],t}function co(t,n){return t[0]=1/n[0],t[1]=1/n[1],t}function so(t,n){var r=n[0],e=n[1],a=r*r+e*e;return a>0&&(a=1/Math.sqrt(a),t[0]=n[0]*a,t[1]=n[1]*a),t}function fo(t,n){return t[0]*n[0]+t[1]*n[1]}function lo(t,n,r){var e=n[0]*r[1]-n[1]*r[0];return t[0]=t[1]=0,t[2]=e,t}function ho(t,n,r,e){var a=n[0],o=n[1];return t[0]=a+e*(r[0]-a),t[1]=o+e*(r[1]-o),t}function mo(t,n){n=n||1;var r=2*M()*Math.PI;return t[0]=Math.cos(r)*n,t[1]=Math.sin(r)*n,t}function Mo(t,n,r){var e=n[0],a=n[1];return t[0]=r[0]*e+r[2]*a,t[1]=r[1]*e+r[3]*a,t}function vo(t,n,r){var e=n[0],a=n[1];return t[0]=r[0]*e+r[2]*a+r[4],t[1]=r[1]*e+r[3]*a+r[5],t}function go(t,n,r){var e=n[0],a=n[1];return t[0]=r[0]*e+r[3]*a+r[6],t[1]=r[1]*e+r[4]*a+r[7],t}function po(t,n,r){var e=n[0],a=n[1];return t[0]=r[0]*e+r[4]*a+r[12],t[1]=r[1]*e+r[5]*a+r[13],t}function bo(t,n,r,e){var a=n[0]-r[0],o=n[1]-r[1],u=Math.sin(e),i=Math.cos(e);return t[0]=a*i-o*u+r[0],t[1]=a*u+o*i+r[1],t}function wo(t,n){var r=t[0],e=t[1],a=n[0],o=n[1],u=r*r+e*e;u>0&&(u=1/Math.sqrt(u));var i=a*a+o*o;i>0&&(i=1/Math.sqrt(i));var c=(r*a+e*o)*u*i;return c>1?0:c<-1?Math.PI:Math.acos(c)}function xo(t){return"vec2("+t[0]+", "+t[1]+")"}function Po(t,n){return t[0]===n[0]&&t[1]===n[1]}function yo(t,n){var r=t[0],e=t[1],a=n[0],o=n[1];return Math.abs(r-a)<=d*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(e-o)<=d*Math.max(1,Math.abs(e),Math.abs(o))}var So=oo,To=Ha,Eo=Wa,Ao=Qa,Ro=eo,Vo=ao,qo=uo,_o=function(){var t=Ua();return function(n,r,e,a,o,u){var i=void 0,c=void 0;for(r||(r=2),e||(e=0),c=a?Math.min(a*r+e,n.length):n.length,i=e;i<c;i+=r)t[0]=n[i],t[1]=n[i+1],o(t,t,u),n[i]=t[0],n[i+1]=t[1];return n}}();r.d(n,"glMatrix",function(){return e}),r.d(n,"mat2",function(){return a}),r.d(n,"mat2d",function(){return o}),r.d(n,"mat3",function(){return u}),r.d(n,"mat4",function(){return i}),r.d(n,"quat",function(){return f}),r.d(n,"quat2",function(){return l}),r.d(n,"vec2",function(){return h}),r.d(n,"vec3",function(){return c}),r.d(n,"vec4",function(){return s})},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=r(2);n.getVertexSize=function(t){let n=0;return"float"===t.type&&(n=4),t.components*n},n.getVertexType=function(t){let n=0;return"float"==t.type&&(n=e.gl.FLOAT),n};class a{constructor(t,n,r){function a(t,n){const r=e.gl.createShader(t);return e.gl.shaderSource(r,n),e.gl.compileShader(r),e.gl.getShaderParameter(r,e.gl.COMPILE_STATUS)?r:(alert("An error occurred compiling the shaders: "+e.gl.getShaderInfoLog(r)),e.gl.deleteShader(r),null)}const o=a(e.gl.VERTEX_SHADER,t),u=a(e.gl.FRAGMENT_SHADER,n),i=e.gl.createProgram();e.gl.attachShader(i,o),e.gl.attachShader(i,u),e.gl.linkProgram(i),e.gl.getProgramParameter(i,e.gl.LINK_STATUS)||alert("Unable to initialize the shader program: "+e.gl.getProgramInfoLog(i)),this.shaderProgram=i,this.vertexAttributes=r,e.gl.flush()}use(){e.gl.useProgram(this.shaderProgram)}setFloat(t,n){e.gl.uniform1f(e.gl.getUniformLocation(this.shaderProgram,t),n)}setMatrix4(t,n,r=!1){e.gl.uniformMatrix4fv(e.gl.getUniformLocation(this.shaderProgram,t),r,n)}setVec3(t,n){e.gl.uniform3fv(e.gl.getUniformLocation(this.shaderProgram,t),n)}}n.Shader=a,n.hasNormals=function(t){for(let n of t.vertexAttributes)if("aNormal"==n.name)return!0;return!1};class o extends a{constructor(){super(o.vsSource,o.fsSource,o.vertexAttributes)}}o.vertexAttributes=[{name:"aPos",components:3,type:"float"},{name:"aNormal",components:3,type:"float"},{name:"aColor",components:3,type:"float"}],o.vsSource="#version 300 es\n        layout (location = 0) in vec3 aPos;\n        layout (location = 1) in vec3 aNormal;\n        layout (location = 2) in vec3 aColor;\n        \n        uniform mat4 uModel;\n        uniform mat4 uView;\n        uniform mat4 uProjection;\n        uniform mat4 uNormal;\n        uniform mat4 uLightSpaceMatrix;\n\n        out vec3 vPos;\n        out vec3 vNormal;\n        out vec3 vColor;\n        out vec4 vFragPosLightSpace;\n\n        void main() {\n            gl_Position = uProjection * uView * uModel * vec4(aPos, 1.0);\n            vNormal = mat3(uNormal) * aNormal;\n            vPos = vec3(uModel * vec4(aPos, 1.0));\n            vColor = aColor;\n            vFragPosLightSpace = uLightSpaceMatrix * vec4(vPos, 1.0);\n        }\n    ",o.fsSource="#version 300 es\n        precision mediump float;\n\n        in vec3 vPos;\n        in vec3 vNormal;\n        in vec3 vColor;\n        in vec4 vFragPosLightSpace;\n\n        uniform vec3 uLightColor;\n        uniform vec3 uLightDir;\n        uniform vec3 uViewPos;\n\n        uniform sampler2D shadowMap;\n\n        out vec4 fragColor;\n\n        float ShadowCalculation() {\n            vec3 projCoords = vFragPosLightSpace.xyz / vFragPosLightSpace.w;\n            projCoords = projCoords * 0.5 + 0.5; \n            float closestDepth = texture(shadowMap, projCoords.xy).r;   \n            float currentDepth = projCoords.z;  \n            float bias = 0.005;\n            // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0; \n            float shadow = 0.0;\n            vec2 texelSize = 1.0 / vec2(textureSize(shadowMap, 0));\n            for(int x = -1; x <= 1; ++x)\n            {\n                for(int y = -1; y <= 1; ++y)\n                {\n                    float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; \n                    shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        \n                }    \n            }\n            shadow /= 9.0; \n            return shadow;\n        }\n\n        void main() {\n            vec3 lightDir = normalize(-uLightDir);\n\n            float ambientStrength = 0.3;\n            vec3 ambient = ambientStrength * uLightColor;\n            \n            vec3 norm = normalize(vNormal);\n            float diff = max(dot(norm, lightDir), 0.0);\n            vec3 diffuse = diff * uLightColor;\n\n            float specularStrength = 0.1;\n            vec3 viewDir = normalize(uViewPos - vPos);\n            vec3 reflectDir = reflect(-lightDir, norm);  \n            float spec = pow(max(dot(viewDir, reflectDir), 0.0), 2.0);\n            vec3 specular = specularStrength * spec * uLightColor; \n\n            float shadow = ShadowCalculation();\n            vec3 result = (ambient + (1.0 - shadow) * (diffuse + specular)) * vColor;\n            fragColor = vec4(result, 1);\n        }\n    ",n.colorShader=new o;class u extends a{constructor(){super(u.vsSource,u.fsSource,u.vertexAttributes)}}u.vertexAttributes=[{name:"aPos",components:3,type:"float"},{name:"aColor",components:3,type:"float"}],u.vsSource="#version 300 es\n        layout (location = 0) in vec3 aPos;\n        layout (location = 2) in vec3 aColor;\n        \n        uniform mat4 uModel;\n        uniform mat4 uView;\n        uniform mat4 uProjection;\n\n        out vec3 vColor;\n\n        void main() {\n            gl_Position = uProjection * uView * uModel * vec4(aPos, 1);\n            vColor = aColor;\n        }\n    ",u.fsSource="#version 300 es\n        precision mediump float;\n        \n        in vec3 vColor;\n\n        out vec4 fragColor;\n\n        void main() {\n            fragColor = vec4(vColor, 1);\n        }\n    ",n.basicShader=new u;class i extends a{constructor(){super(i.vsSource,i.fsSource,[])}}i.vsSource="#version 300 es\n        layout (location = 0) in vec3 aPos;\n        layout (location = 2) in vec2 aTexCoords;\n\n        out vec2 vTexCoords;\n\n        void main() {\n            gl_Position = vec4(aPos, 1);\n            vTexCoords = aTexCoords;\n        }\n    ",i.fsSource="#version 300 es\n        precision mediump float;\n\n        in vec2 vTexCoords;\n\n        uniform sampler2D tex;\n\n        out vec4 fragColor;\n\n        void main() {\n            fragColor = texture(tex, vTexCoords);\n        }\n    ",n.debugShader=new i;class c extends a{constructor(){super(c.vsSource,c.fsSource,[])}}c.vsSource="#version 300 es\n        layout (location = 0) in vec3 aPos;\n\n        uniform mat4 uLightSpaceMatrix;\n        uniform mat4 uModel;\n\n        void main() {\n            gl_Position = uLightSpaceMatrix * uModel * vec4(aPos, 1.0);\n        }\n    ",c.fsSource="#version 300 es\n        void main() {\n\n        }\n    ",n.shadowShader=new c},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=document.getElementById("glcanvas");n.gl=e.getContext("webgl2"),n.gl.clearDepth(1),n.gl.clearColor(135/255,206/255,250/255,1),n.gl.enable(n.gl.DEPTH_TEST),n.gl.enable(n.gl.CULL_FACE),n.gl.cullFace(n.gl.BACK)},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=r(1),a=r(2),o=r(0),u=9,i=8;class c{constructor(t,n,r){this.drawMode=a.gl.TRIANGLES,this._normal=null,this.verticies=t,this.indices=n,this.vao=a.gl.createVertexArray(),this.vbo=a.gl.createBuffer(),this.ebo=a.gl.createBuffer(),this._transform=o.mat4.create(),this.shader=r,this.setupMesh()}get transform(){return this._transform}set transform(t){this._transform=t,this._normal=null}setTransform(t,n,r){let e=o.mat4.create();o.mat4.multiply(e,e,r),o.mat4.multiply(e,e,n),o.mat4.multiply(e,e,t),this.transform=e}get normal(){return null==this._normal&&(this._normal=o.mat4.transpose(o.mat4.create(),o.mat4.invert(o.mat4.create(),this.transform))),this._normal}setupMesh(){a.gl.bindVertexArray(this.vao);let t=[];for(let n of this.verticies)t.push(...n);a.gl.bindBuffer(a.gl.ARRAY_BUFFER,this.vbo),a.gl.bufferData(a.gl.ARRAY_BUFFER,new Float32Array(t),a.gl.STATIC_DRAW),a.gl.bindBuffer(a.gl.ELEMENT_ARRAY_BUFFER,this.ebo),a.gl.bufferData(a.gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(this.indices),a.gl.STATIC_DRAW);let n=this.verticies[0].length==u,r=n?4*u:4*i;a.gl.enableVertexAttribArray(0),a.gl.vertexAttribPointer(0,3,a.gl.FLOAT,!1,r,0),a.gl.enableVertexAttribArray(1),a.gl.vertexAttribPointer(1,3,a.gl.FLOAT,!1,r,12),a.gl.enableVertexAttribArray(2),a.gl.vertexAttribPointer(2,n?3:2,a.gl.FLOAT,!1,r,24),a.gl.bindVertexArray(null)}draw(){a.gl.bindVertexArray(this.vao),a.gl.drawElements(this.drawMode,this.indices.length,a.gl.UNSIGNED_INT,0),a.gl.bindVertexArray(null)}}function s(...t){return t.map(t=>Array.from(t)).reduce((t,n)=>t.concat(n),[])}n.Mesh=c,n.collate=s;n.NormalMesh=class extends c{constructor(t,n,r){let u=[],i=[],c=0,f=o.mat3.normalFromMat4(o.mat3.create(),t.transform);for(let e of t.verticies){let a=o.vec3.transformMat4(o.vec3.create(),o.vec3.fromValues(e[0],e[1],e[2]),t.transform),l=o.vec3.transformMat3(o.vec3.create(),o.vec3.fromValues(e[3],e[4],e[5]),f);o.vec3.scale(l,o.vec3.normalize(l,l),r);let h=o.vec3.add(o.vec3.create(),a,l),d=o.vec3.fromValues(0,0,0);u.push(s(a,d,n),s(h,d,n)),i.push(c,c+1),c+=2}super(u,i,e.basicShader),this.drawMode=a.gl.LINES}}},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=r(3),a=r(0),o=r(1),u=[{position:[-1,-1,1],normal:[0,0,1]},{position:[1,-1,1],normal:[0,0,1]},{position:[1,1,1],normal:[0,0,1]},{position:[-1,1,1],normal:[0,0,1]},{position:[-1,-1,-1],normal:[0,0,-1]},{position:[-1,1,-1],normal:[0,0,-1]},{position:[1,1,-1],normal:[0,0,-1]},{position:[1,-1,-1],normal:[0,0,-1]},{position:[-1,1,-1],normal:[0,1,0]},{position:[-1,1,1],normal:[0,1,0]},{position:[1,1,1],normal:[0,1,0]},{position:[1,1,-1],normal:[0,1,0]},{position:[-1,-1,-1],normal:[0,-1,0]},{position:[1,-1,-1],normal:[0,-1,0]},{position:[1,-1,1],normal:[0,-1,0]},{position:[-1,-1,1],normal:[0,-1,0]},{position:[1,-1,-1],normal:[1,0,0]},{position:[1,1,-1],normal:[1,0,0]},{position:[1,1,1],normal:[1,0,0]},{position:[1,-1,1],normal:[1,0,0]},{position:[-1,-1,-1],normal:[-1,0,0]},{position:[-1,-1,1],normal:[-1,0,0]},{position:[-1,1,1],normal:[-1,0,0]},{position:[-1,1,-1],normal:[-1,0,0]}],i=[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23];n.Cube=class extends e.Mesh{constructor(t){super(u.map(n=>n.position.concat(n.normal).concat(Array.from(t))),i,o.colorShader)}};n.UnlitCube=class extends e.Mesh{constructor(t){super(u.map(n=>n.position.concat([0,0,0]).concat(t)),i,o.basicShader)}};class c extends e.Mesh{constructor(t,n,r){let u=String(t)+String(n)+String(r),i=c.cache.get(u);if(void 0!=r||void 0==i){let i,l,h,d,m,M,v=0,g=a.vec3.fromValues(Math.sin(1*Math.PI/4),0,Math.cos(1*Math.PI/4)),p=a.vec3.fromValues(Math.sin(3*Math.PI/4),0,Math.cos(3*Math.PI/4)),b=a.vec3.fromValues(Math.sin(5*Math.PI/4),0,Math.cos(5*Math.PI/4)),w=a.vec3.fromValues(Math.sin(7*Math.PI/4),0,Math.cos(7*Math.PI/4)),x=a.vec3.fromValues(0,1,0),P=a.vec3.fromValues(0,-1,0),y=[(i=v++,g),(l=v++,p),(h=v++,b),(d=v++,w),(m=v++,x),(M=v++,P)],S=[[m,i,l],[M,l,i],[m,d,i],[M,i,d],[m,h,d],[M,d,h],[m,l,h],[M,h,l]];function s(t){let[n,r,e]=t,[o,u,i]=[y[n],y[r],y[e]],c=a.vec3.scale(a.vec3.create(),a.vec3.add(a.vec3.create(),o,i),.5),s=a.vec3.scale(a.vec3.create(),a.vec3.add(a.vec3.create(),o,u),.5),f=a.vec3.scale(a.vec3.create(),a.vec3.add(a.vec3.create(),u,i),.5),l=y.length;y.push(c);let h=y.length;y.push(s);let d=y.length;return y.push(f),[[n,h,l],[h,d,l],[h,r,d],[l,d,e]]}for(let n=0;n<t;n++){let t=[];for(let n of S)t.push(...s(n));S=t}let T=[];for(let t of S)T.push(...t);let E=new Map;function f(t){let n=function(...t){return t.reduce((t,n)=>t+","+String(n),"")}(t),e=E.get(n);return void 0==e&&(e=void 0==r?1:Math.random()*r-r/2+1,E.set(n,e)),e}y.forEach(t=>a.vec3.normalize(t,t)),y.forEach(t=>a.vec3.scale(t,t,f(t)));let A=[];if(void 0!=r){let t=[],r=0;for(let o of S){let u=y[o[0]],i=y[o[1]],c=y[o[2]],s=a.vec3.subtract(a.vec3.create(),i,u),f=a.vec3.subtract(a.vec3.create(),c,u),l=a.vec3.cross(a.vec3.create(),s,f);A.push(e.collate(u,l,n),e.collate(i,l,n),e.collate(c,l,n)),t.push(r,r+1,r+2),r+=3}T=t}else for(let t of y)A.push(e.collate(t,t,n));super(A,T,o.colorShader),c.cache.set(u,[A,T])}else{let[t,n]=i;super(t,n,o.colorShader),console.log("sphere cache hit")}}}c.cache=new Map,n.Sphere=c;n.DebugQuad=class extends e.Mesh{constructor(){super([[-1,-1,0,0,0,0,0,0],[-.75,-1,0,0,0,0,1,0],[-.75,-.75,0,0,0,0,1,1],[-1,-.75,0,0,0,0,0,1]],[0,1,2,0,2,3],o.debugShader)}};class s extends e.Mesh{constructor(t,n,r){let u=String(t)+String(n)+String(r),i=s.cache.get(u);if(void 0==i){let i=[],c=[],f=0,l=n,h=2*n;for(let t=0;t<n;t++){let n=t/l*2*Math.PI,o=Math.sin(n),u=Math.cos(n),s=a.vec3.fromValues(o,1,u),d=a.vec3.fromValues(o,-1,u),m=a.vec3.fromValues(o,0,u);i.push(e.collate(s,m,r),e.collate(d,m,r)),c.push(f+0,f+1,(f+2)%h,f+1,(f+3)%h,(f+2)%h),f+=2}if(t){let t=a.vec3.fromValues(0,1,0),o=a.vec3.fromValues(0,-1,0),u=i.length;i.push(e.collate(t,t,r));let s=i.length;i.push(e.collate(o,o,r));let f=-1,l=-1;for(let h=0;h<n;h++){let d=h/n*2*Math.PI,m=Math.sin(d),M=Math.cos(d),v=a.vec3.fromValues(m,1,M),g=a.vec3.fromValues(m,-1,M),p=i.length;i.push(e.collate(v,t,r));let b=i.length;i.push(e.collate(g,o,r)),0==h&&(f=p,l=b),h==n-1?c.push(p,f,u,l,b,s):c.push(p,p+2,u,b+2,b,s)}}super(i,c,o.colorShader),s.cache.set(u,[i,c])}else{let[t,n]=i;super(t,n,o.colorShader),console.log("cylinder cache hit")}}}s.cache=new Map,n.Cylinder=s;class f extends e.Mesh{constructor(t,n,r){let u=String(t)+String(n)+String(a.vec3),i=f.cache.get(u);if(void 0==i){let i=[],c=[],s=0,l=2*n,h=a.vec3.fromValues(0,1,0);for(let t=0;t<n;t++){let o=t/n*2*Math.PI,u=(t+1)/n*2*Math.PI,f=a.vec3.fromValues(Math.sin(o),0,Math.cos(o)),d=(a.vec3.fromValues(Math.sin(u),0,Math.cos(u)),a.vec3.fromValues(Math.sin(o),1,Math.cos(o)));a.vec3.fromValues(Math.sin(u),1,Math.cos(u));i.push(e.collate(f,d,r),e.collate(h,d,r)),c.push(s,(s+3)%l,(s+1)%l,s,(s+2)%l,(s+3)%l),s+=2}if(t){let t=i.length,o=a.vec3.fromValues(0,-1,0);i.push(e.collate(a.vec3.fromValues(0,0,0),o,r));let u=i.length;for(let s=0;s<n;s++){let f=s/n*2*Math.PI,l=(s+1)/n*2*Math.PI,h=a.vec3.fromValues(Math.sin(f),0,Math.cos(f)),d=a.vec3.fromValues(Math.sin(l),0,Math.cos(l));i.push(e.collate(h,o,r),e.collate(d,o,r)),c.push(t,u+1,u),u+=2}}super(i,c,o.colorShader),f.cache.set(u,[i,c])}else{let[t,n]=i;super(t,n,o.colorShader),console.log("cone cache hit")}}}f.cache=new Map,n.Cone=f},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=r(6);let a=document.getElementById("glcanvas"),o=new e.Forest(a);o.setup(),o.generate();let u=Date.now();const i=1e3/60;!function t(){requestAnimationFrame(t);let n=Date.now(),r=n-u;r>i&&(o.update(r),o.draw(),u=n-r%i)}()},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=r(7),a=r(4),o=r(8),u=r(0),i=r(9);function c(t,n,r){return u.vec3.fromValues(t/255,n/255,r/255)}n.Forest=class extends e.Scene{setup(){super.setup(),this.params.addRange("terrainNoiseResolution",e.sceneParams,2,10,5,1),this.params.addRange("terrainVertexResolution",e.sceneParams,10,500,100,10),this.params.addRange("terrainYScale",e.sceneParams,1,20,5,1),this.params.addRange("terrainNSmooth",e.sceneParams,0,10,3,1),this.params.addRange("terrainSmoothWidth",e.sceneParams,3,11,3,2),this.params.addRange("objectFrequency",e.sceneParams,0,100,50,1)}preGenerate(){super.preGenerate();let t=this.params.get("terrainNoiseResolution"),n=this.params.get("terrainVertexResolution"),r=this.params.get("terrainNSmooth"),e=this.params.get("terrainSmoothWidth"),s=this.params.get("terrainYScale"),f=this.params.get("objectFrequency"),l=new o.PerlinTerrain(t,t,n,n,r,e,c(34,139,34));u.mat4.multiply(l.transform,l.transform,u.mat4.fromScaling(u.mat4.create(),[50,s,50])),u.mat4.multiply(l.transform,l.transform,u.mat4.fromTranslation(u.mat4.create(),[-.5,0,-.5])),this.meshes.push(l);let h=i.randomPoisson(f);for(let t=0;t<h;t++){let t=this.makeObject(),r=Math.floor(Math.random()*n),e=Math.floor(Math.random()*n),a=l.heightmap[r][e]*s-1,o=r/n*50-25,i=e/n*50-25,c=u.mat4.fromTranslation(u.mat4.create(),[o,a,i]);for(let n of t)u.mat4.multiply(n.transform,c,n.transform);this.meshes.push(...t)}this.meshes.push(new a.DebugQuad)}makeObject(){let t=[this.makeRock,this.makeConeTree,this.makeSphereTree];return t[Math.floor(Math.random()*t.length)]()}makeRock(){let t=new a.Sphere(1,c(128,128,128),.7),n=1.25*Math.random()+.75;return t.setTransform(u.mat4.fromScaling(u.mat4.create(),[1/n,1/n,1.5/n]),u.mat4.fromYRotation(u.mat4.create(),2*Math.random()*Math.PI),u.mat4.fromTranslation(u.mat4.create(),[0,.75,0])),[t]}makeSphereTree(){let t=new a.Cylinder(!0,64,c(210,180,140)),n=i.randomNormal(4,1),r=u.mat4.create(),e=u.mat4.fromTranslation(u.mat4.create(),[0,n/2,0]),o=u.mat4.fromScaling(u.mat4.create(),[.25,n/2,.25]);t.setTransform(o,r,e);let s=new a.Sphere(4,c(60,179,113)),f=i.randomNormal(1.5,.2);return e=u.mat4.fromTranslation(u.mat4.create(),[0,n+f/3,0]),o=u.mat4.fromScaling(u.mat4.create(),[f,f,f]),s.setTransform(o,r,e),[t,s]}makeConeTree(){let t=new a.Cylinder(!0,64,c(210,180,140)),n=i.randomNormal(5,.8),r=u.mat4.create(),e=u.mat4.fromTranslation(u.mat4.create(),[0,n/2,0]),o=u.mat4.fromScaling(u.mat4.create(),[.25,n/2,.25]);t.setTransform(o,r,e);let s=Math.floor(2*Math.random()+2),f=[];for(let t=0;t<s;t++){let s=new a.Cone(!0,5*Math.random()+5,c(0,i.randomNormal(110,10),0)),l=i.randomNormal(1.5,.05);e=u.mat4.fromTranslation(u.mat4.create(),[0,n/2+t,0]),o=u.mat4.fromScaling(u.mat4.create(),[l,n/1.25,l]),s.setTransform(o,r,e),f.push(s)}return[t,...f]}}},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=r(0),a=r(2),o=r(3),u=r(4),i=r(1);function c(t){return Math.sin(t*Math.PI/180)}function s(t){return Math.cos(t*Math.PI/180)}function f(t,n,r){return e.vec3.fromValues(r*c(t)*s(n),r*c(n),r*s(t)*s(n))}n.sceneParams="sceneParams",n.renderParams="renderParams";n.Scene=class{constructor(t){this.meshes=[],this.firstPerson=!1,this.cameraPitch=45,this.cameraYaw=45,this.cameraRadius=50,this._cameraPos=e.vec3.fromValues(0,0,0),this.lightColor=e.vec3.fromValues(1,1,1),this.lightRadius=50,this.lightMesh=null,this.lightProjection=e.mat4.ortho(e.mat4.create(),-40,40,-40,40,1,2*this.lightRadius),this.prevX=void 0,this.prevY=void 0,this.ismousedown=!1,this.view=e.mat4.create(),this.params=new l,this.shadowWidth=2048,this.shadowHeight=2048,this.movingForward=!1,this.movingBackward=!1,this.strafingLeft=!1,this.strafingRight=!1,this.ascending=!1,this.descending=!1,this.canvas=t,this.shadowMapFbo=a.gl.createFramebuffer(),this.shadowMapTexture=a.gl.createTexture(),a.gl.bindTexture(a.gl.TEXTURE_2D,this.shadowMapTexture),a.gl.texImage2D(a.gl.TEXTURE_2D,0,a.gl.DEPTH_COMPONENT24,this.shadowWidth,this.shadowHeight,0,a.gl.DEPTH_COMPONENT,a.gl.UNSIGNED_INT,null),a.gl.texParameteri(a.gl.TEXTURE_2D,a.gl.TEXTURE_MIN_FILTER,a.gl.NEAREST),a.gl.texParameteri(a.gl.TEXTURE_2D,a.gl.TEXTURE_MAG_FILTER,a.gl.NEAREST),a.gl.texParameteri(a.gl.TEXTURE_2D,a.gl.TEXTURE_WRAP_S,a.gl.REPEAT),a.gl.texParameteri(a.gl.TEXTURE_2D,a.gl.TEXTURE_WRAP_T,a.gl.REPEAT),a.gl.bindFramebuffer(a.gl.FRAMEBUFFER,this.shadowMapFbo),a.gl.framebufferTexture2D(a.gl.FRAMEBUFFER,a.gl.DEPTH_ATTACHMENT,a.gl.TEXTURE_2D,this.shadowMapTexture,0),a.gl.drawBuffers([a.gl.NONE]),a.gl.readBuffer(a.gl.NONE),a.gl.bindFramebuffer(a.gl.FRAMEBUFFER,null),this.addEventListeners()}get cameraPos(){return this.firstPerson?this._cameraPos:f(this.cameraYaw,this.cameraPitch,this.cameraRadius)}get cameraLook(){if(this.firstPerson){let t=f(this.cameraYaw,this.cameraPitch,this.cameraRadius);return e.vec3.add(e.vec3.create(),this.cameraPos,t)}return e.vec3.fromValues(0,0,0)}get lightTransform(){let t=e.vec3.scale(e.vec3.create(),this.lightDir,-this.lightRadius);return e.mat4.translate(e.mat4.create(),e.mat4.create(),t)}get lightDir(){let t=this.params.get("lightYaw"),n=this.params.get("lightPitch");return e.vec3.scale(e.vec3.create(),f(t,n,1),-1)}get lightView(){let t=e.vec3.scale(e.vec3.create(),this.lightDir,-this.lightRadius);return e.mat4.lookAt(e.mat4.create(),t,e.vec3.add(e.vec3.create(),t,this.lightDir),[0,1,0])}get lightSpaceMatrix(){return e.mat4.multiply(e.mat4.create(),this.lightProjection,this.lightView)}get projection(){return e.mat4.perspective(e.mat4.create(),45,a.gl.canvas.clientWidth/a.gl.canvas.clientHeight,.1,500)}setup(){let t=document.getElementById(n.sceneParams);for(;t.childNodes.length>1;)t.removeChild(t.lastChild);let r=this,e=document.createElement("button");e.innerHTML="Generate",e.addEventListener("click",function(){r.generate()}),t.appendChild(e);let a=document.getElementById(n.renderParams);for(;a.childNodes.length>1;)a.removeChild(a.lastChild);this.params=new l,this.params.addRange("lightYaw",n.renderParams,0,360,0,1),this.params.addRange("lightPitch",n.renderParams,0,180,45,1),this.params.addCheckbox("drawNormals",n.renderParams,!1),this.params.addCheckbox("drawShadowMapTexutre",n.renderParams,!1)}generate(){this.meshes=[],this.preGenerate(),this.postGenerate()}preGenerate(){this.lightMesh=new u.UnlitCube([1,1,1]),this.meshes.push(this.lightMesh)}postGenerate(){let t=[];for(let n of this.meshes)if(i.hasNormals(n.shader)){let r=e.vec3.fromValues(1,0,0);t.push(new o.NormalMesh(n,r,.1))}this.meshes.push(...t)}addEventListeners(){let t=this,n=t.canvas;n.requestPointerLock=n.requestPointerLock||n.mozRequestPointerLock,this.canvas.onmousedown=function(n){t.ismousedown=!0,t.prevX=n.clientX,t.prevY=n.clientY},this.canvas.onmouseup=function(){t.ismousedown=!1},this.canvas.onmousemove=function(n){void 0==t.prevX&&(t.prevX=n.clientX),void 0==t.prevY&&(t.prevY=n.clientY),t.ismousedown&&(t.cameraYaw-=n.clientX-t.prevX,t.cameraPitch+=n.clientY-t.prevY,t.cameraPitch>=90&&(t.cameraPitch=89.9),t.cameraPitch<=-90&&(t.cameraPitch=-89.9),t.prevX=n.clientX,t.prevY=n.clientY)},this.canvas.onwheel=function(n){t.cameraRadius+=n.deltaY>0?1:-1,t.cameraRadius<1&&(t.cameraRadius=1)},document.addEventListener("keyup",function(r){console.log(r.key),"f"==r.key&&(t.firstPerson=!0,t.firstPerson&&n.requestPointerLock()),t.firstPerson&&("w"==r.key?t.movingForward=!1:"a"==r.key?t.strafingLeft=!1:"s"==r.key?t.movingBackward=!1:"d"==r.key?t.strafingRight=!1:"q"==r.key?t.ascending=!1:"e"==r.key&&(t.descending=!1))}),document.addEventListener("keydown",function(n){t.firstPerson&&("w"==n.key?t.movingForward=!0:"a"==n.key?t.strafingLeft=!0:"s"==n.key?t.movingBackward=!0:"d"==n.key?t.strafingRight=!0:"q"==n.key?t.ascending=!0:"e"==n.key&&(t.descending=!0))});let r=document;function e(){r.pointerLockElement===n||r.mozPointerLockElement===n?(console.log("The pointer lock status is now locked"),r.addEventListener("mousemove",a,!1)):(console.log("The pointer lock status is now unlocked"),r.removeEventListener("mousemove",a,!1),t.firstPerson=!1)}function a(n){t.cameraPitch-=n.movementY,t.cameraYaw-=n.movementX,t.cameraPitch>=90&&(t.cameraPitch=89.9),t.cameraPitch<=-90&&(t.cameraPitch=-89.9)}r.addEventListener("pointerlockchange",e,!1),r.addEventListener("mozpointerlockchange",e,!1)}update(t){if(e.mat4.lookAt(this.view,this.cameraPos,this.cameraLook,[0,1,0]),this.lightMesh.transform=this.lightTransform,this.firstPerson){console.log(this.movingForward);let t=e.vec3.fromValues(0,0,0);this.movingForward&&e.vec3.add(t,t,[c(this.cameraYaw),0,s(this.cameraYaw)]),this.movingBackward&&e.vec3.add(t,t,[c(this.cameraYaw+180),0,s(this.cameraYaw+180)]),this.strafingRight&&e.vec3.add(t,t,[c(this.cameraYaw-90),0,s(this.cameraYaw-90)]),this.strafingLeft&&e.vec3.add(t,t,[c(this.cameraYaw+90),0,s(this.cameraYaw+90)]),this.ascending&&e.vec3.add(t,t,[0,1,0]),this.descending&&e.vec3.add(t,t,[0,-1,0]),e.vec3.normalize(t,t),e.vec3.scale(t,t,.3),e.vec3.add(this._cameraPos,this._cameraPos,t)}}draw(){a.gl.viewport(0,0,this.shadowWidth,this.shadowHeight),a.gl.bindFramebuffer(a.gl.FRAMEBUFFER,this.shadowMapFbo),a.gl.clear(a.gl.DEPTH_BUFFER_BIT),i.shadowShader.use(),i.shadowShader.setMatrix4("uLightSpaceMatrix",this.lightSpaceMatrix);for(let t of this.meshes)t instanceof u.DebugQuad||t instanceof o.NormalMesh||(i.shadowShader.setMatrix4("uModel",t.transform),t.draw());a.gl.activeTexture(a.gl.TEXTURE0),a.gl.bindTexture(a.gl.TEXTURE_2D,this.shadowMapTexture),a.gl.viewport(0,0,a.gl.canvas.clientWidth,a.gl.canvas.clientHeight),a.gl.bindFramebuffer(a.gl.FRAMEBUFFER,null),a.gl.clear(a.gl.COLOR_BUFFER_BIT|a.gl.DEPTH_BUFFER_BIT);for(let t of this.meshes)!this.params.get("drawNormals")&&t instanceof o.NormalMesh||!this.params.get("drawShadowMapTexutre")&&t instanceof u.DebugQuad||(t.shader.use(),t.shader==i.colorShader&&(t.shader.setVec3("uViewPos",this.cameraPos),t.shader.setVec3("uLightDir",this.lightDir),t.shader.setVec3("uLightColor",this.lightColor),t.shader.setMatrix4("uNormal",t.normal)),t.shader.setMatrix4("uLightSpaceMatrix",this.lightSpaceMatrix),t.shader.setMatrix4("uModel",t.transform),t.shader.setMatrix4("uView",this.view),t.shader.setMatrix4("uProjection",this.projection),t.draw())}};class l{constructor(){this.map=new Map}addRange(t,n,r,e,a,o){let u=document.createElement("input");u.type="range",u.name=t,u.min=String(r),u.max=String(e),u.defaultValue=String(a),u.step=String(o);let i=document.createElement("label"),c=function(){i.innerHTML=t+": "+u.value};c(),u.addEventListener("input",c);let s=document.createElement("div");s.className="row";let f=document.getElementById(n);s.appendChild(i),s.appendChild(u),f.appendChild(s),this.map.set(t,()=>Number(u.value))}addCheckbox(t,n,r){let e=document.createElement("input");e.type="checkbox",e.name=t,e.checked=r;let a=document.createElement("label");a.innerHTML=t+": ";let o=document.createElement("div");o.className="row",o.appendChild(a),o.appendChild(e),document.getElementById(n).appendChild(o),this.map.set(t,()=>e.checked)}get(t){return this.map.get(t)()}}},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const e=r(3),a=r(1),o=r(0);class u extends e.Mesh{constructor(t,n){let r=t.length,u=t[0].length,i=[],c=[],s=[];for(let t=0;t<r;t++){let t=[],n=[],r=[];for(let e=0;e<u;e++)t.push(o.vec3.create()),n.push([]),r.push(-1);i.push(t),c.push(n),s.push(r)}for(let n=0;n<r-1;n++)for(let e=0;e<u-1;e++){let a=o.vec3.fromValues(n/(r-1),t[n][e],e/(u-1)),s=o.vec3.fromValues(n/(r-1),t[n][e+1],(e+1)/(u-1)),f=o.vec3.fromValues((n+1)/(r-1),t[n+1][e+1],(e+1)/(u-1)),l=o.vec3.fromValues((n+1)/(r-1),t[n+1][e],e/(u-1)),h=o.vec3.sub(o.vec3.create(),s,a),d=o.vec3.sub(o.vec3.create(),f,a),m=o.vec3.sub(o.vec3.create(),l,a),M=[o.vec3.cross(o.vec3.create(),h,d),o.vec3.cross(o.vec3.create(),d,m)];for(let[t,r]of[[n,e],[n,e+1],[n+1,e+1],[n+1,e]])c[t][r].push(...M);i[n][e]=a,i[n][e+1]=s,i[n+1][e+1]=f,i[n+1][e]=l}let f=c.map(function(t){return t.map(function(t){let n=t.reduce((t,n)=>o.vec3.add(t,t,n),o.vec3.fromValues(0,0,0));return o.vec3.scale(o.vec3.create(),n,1/t.length)})}),l=0,h=[],d=[];for(let t=0;t<r-1;t++)for(let r=0;r<u-1;r++){let a=i[t][r],o=i[t][r+1],u=i[t+1][r+1],c=i[t+1][r],m=f[t][r],M=f[t][r+1],v=f[t+1][r+1],g=f[t+1][r];-1==s[t][r]&&(d.push(e.collate(a,m,n)),s[t][r]=l++),-1==s[t][r+1]&&(d.push(e.collate(o,M,n)),s[t][r+1]=l++),-1==s[t+1][r+1]&&(d.push(e.collate(u,v,n)),s[t+1][r+1]=l++),-1==s[t+1][r]&&(d.push(e.collate(c,g,n)),s[t+1][r]=l++);let p=s[t][r],b=s[t][r+1],w=s[t+1][r+1],x=s[t+1][r];h.push(p,b,w,p,w,x)}const m=o.vec3.fromValues(.5,.5,.5);let M=o.vec3.fromValues(-1,0,0);l=d.length;for(let n=0;n<u-1;n++){let r=t[0][n],a=t[0][n+1],i=n/(u-1),c=(n+1)/(u-1);if(0==n){let t=o.vec3.fromValues(0,r,i),n=o.vec3.fromValues(0,-2,i);d.push(e.collate(t,M,m),e.collate(n,M,m))}let s=o.vec3.fromValues(0,a,c),f=o.vec3.fromValues(0,-2,c);d.push(e.collate(s,M,m),e.collate(f,M,m)),h.push(l,l+1,l+2,l+1,l+3,l+2),l+=2}M=o.vec3.fromValues(1,0,0),l=d.length;for(let n=0;n<u-1;n++){let a=t[r-1][n],i=t[r-1][n+1],c=n/(u-1),s=(n+1)/(u-1);if(0==n){let t=o.vec3.fromValues(1,a,c),n=o.vec3.fromValues(1,-2,c);d.push(e.collate(t,M,m),e.collate(n,M,m))}let f=o.vec3.fromValues(1,i,s),v=o.vec3.fromValues(1,-2,s);d.push(e.collate(f,M,m),e.collate(v,M,m)),h.push(l,l+2,l+1,l+1,l+2,l+3),l+=2}M=o.vec3.fromValues(0,0,-1),l=d.length;for(let n=0;n<r-1;n++){let a=t[n][0],u=t[n+1][0],i=n/(r-1),c=(n+1)/(r-1);if(0==n){let t=o.vec3.fromValues(i,a,0),n=o.vec3.fromValues(i,-2,0);d.push(e.collate(t,M,m),e.collate(n,M,m))}let s=o.vec3.fromValues(c,u,0),f=o.vec3.fromValues(c,-2,0);d.push(e.collate(s,M,m),e.collate(f,M,m)),h.push(l,l+2,l+1,l+1,l+2,l+3),l+=2}M=o.vec3.fromValues(0,0,1),l=d.length;for(let n=0;n<r-1;n++){let a=t[n][u-1],i=t[n+1][u-1],c=n/(r-1),s=(n+1)/(r-1);if(0==n){let t=o.vec3.fromValues(c,a,1),n=o.vec3.fromValues(c,-2,1);d.push(e.collate(t,M,m),e.collate(n,M,m))}let f=o.vec3.fromValues(s,i,1),v=o.vec3.fromValues(s,-2,1);d.push(e.collate(f,M,m),e.collate(v,M,m)),h.push(l,l+1,l+2,l+1,l+3,l+2),l+=2}M=o.vec3.fromValues(0,-1,0),l=d.length,d.push(e.collate(o.vec3.fromValues(0,-2,0),M,m),e.collate(o.vec3.fromValues(0,-2,1),M,m),e.collate(o.vec3.fromValues(1,-2,1),M,m),e.collate(o.vec3.fromValues(1,-2,0),M,m)),h.push(l,l+2,l+1,l+3,l+2,l),super(d,h,a.colorShader),this.height=r,this.width=u,this.heightmap=t}}function i(t,n,r){return(1-r)*t+r*n}n.Terrain=u;class c{constructor(t,n){this.ixmax=t,this.iymax=n,this.grads=[];for(let r=0;r<n;r++){let n=[];for(let r=0;r<t;r++){let t=2*Math.PI*Math.random();n.push(o.vec2.fromValues(Math.cos(t),Math.sin(t)))}this.grads.push(n)}}dotGridGradient(t,n,r,e){let a=o.vec2.fromValues(r-t,e-n);return o.vec2.dot(a,this.grads[n][t])}noise(t,n){let r=Math.floor(t),e=r+1,a=Math.floor(n),o=a+1,u=t-r,c=n-a;return i(i(this.dotGridGradient(r,a,t,n),this.dotGridGradient(e,a,t,n),u),i(this.dotGridGradient(r,o,t,n),this.dotGridGradient(e,o,t,n),u),c)}}n.PerlinTerrain=class extends u{constructor(t,n,r,e,a,o,u){let i=new c(t,n),s=[],f=(t-1)/r,l=(n-1)/e;for(let t=0;t<e;t++){let n=[];for(let e=0;e<r;e++)n.push(i.noise(e*f,t*l));s.push(n)}const h=Math.floor(o/2);for(let t=0;t<a;t++)for(let t=0;t<e;t++)for(let n=0;n<r;n++){let a=0,o=0;for(let u=n-h;u<n+h;u++)if(!(u<0||u>=r))for(let n=t-h;n<t+h;n++)n<0||n>=e||(a+=s[n][u],o+=1);s[t][n]=a/o}super(s,u)}}},function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.randomNormal=function(t,n){let r=0;for(let t=0;t<12;t++)r+=Math.random();return n*(r-6)+t},n.randomPoisson=function(t){let n=Math.exp(-t),r=0,e=1;do{r++,e*=Math.random()}while(e>n);return r-1}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,